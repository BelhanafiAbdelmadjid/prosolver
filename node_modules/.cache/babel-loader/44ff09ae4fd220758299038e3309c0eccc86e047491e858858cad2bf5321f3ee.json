{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport apiFetch from \"@/common/api.service\";\nimport interractionLayout from \"./interraction-layout.vue\";\nimport buttonValidation from \"@/components/interraction/buttons/validation-button.vue\";\nimport popupDisplay from \"@/components/interraction/popups/popup-display.vue\";\nimport tableExtension from \"@/components/interraction/tables/table-withextension.vue\";\nexport default {\n  name: 'show-server',\n  data() {\n    return {\n      server: {\n        name: '',\n        ip: '',\n        type: \"UAT\",\n        containers: []\n      },\n      oldServer: {\n        name: '',\n        ip: '',\n        type: \"UAT\",\n        containers: []\n      },\n      popUpBoolean: false,\n      inputPopUP: {\n        label: \"\",\n        type: \"\",\n        id: null\n      }\n    };\n  },\n  components: {\n    buttonValidation,\n    tableExtension,\n    interractionLayout,\n    popupDisplay\n  },\n  methods: {\n    updateServer() {\n      this.keepUpdatedValue(this.oldServer, this.server, [\"id\"]);\n      console.log(\"sending\", this.server);\n      let endpoint = '/server/edit';\n      apiFetch.update(endpoint, {\n        ...this.server\n      }, true, false).then(() => {\n        this.$router.push({\n          name: 'serverShow',\n          params: {\n            id: this.server.id\n          }\n        });\n      });\n    },\n    keepUpdatedValue(oldObject, newObject, dontCheck) {\n      for (const prop of Object.getOwnPropertyNames(oldObject)) {\n        if (oldObject[prop] == newObject[prop] && !dontCheck.includes(prop)) {\n          newObject[prop] = null;\n        }\n      }\n    }\n  },\n  beforeMount() {\n    if (this.$route.query.name) {\n      this.server.name = this.$route.query.name;\n    }\n    if (this.$route.query.type) {\n      this.server.type = this.$route.query.type;\n    }\n    if (this.$route.query.ip) {\n      this.server.ip = this.$route.query.ip;\n    }\n    let endpoint = \"/server/\" + this.$route.params.id;\n    apiFetch.get(endpoint, false).then(server => {\n      this.server = server;\n      this.oldServer = Object.assign({}, this.server);\n    });\n  }\n};","map":{"version":3,"names":["apiFetch","interractionLayout","buttonValidation","popupDisplay","tableExtension","name","data","server","ip","type","containers","oldServer","popUpBoolean","inputPopUP","label","id","components","methods","updateServer","keepUpdatedValue","console","log","endpoint","update","then","$router","push","params","oldObject","newObject","dontCheck","prop","Object","getOwnPropertyNames","includes","beforeMount","$route","query","get","assign"],"sources":["/Users/abdelmadjidbelhanafi/Documents/vsc project/Natixis/new-banxy-rest-api/frontend/src/views/servers/edit.vue"],"sourcesContent":["<template>\n\n    <interractionLayout :forbiddenContainers=\"false\" >\n\n        <template #Header>\n            {{ server.name + \" server\" }} \n        </template>\n        <template #InputName>\n            <input type=\"text\" placeholder=\"Server name...\" v-model=\"server.name\">\n        </template>\n        <template #InputIp>\n            <input type=\"text\" placeholder=\"Server ip address...\" v-model=\"server.ip\">\n        </template>\n        <template #InputType>\n            <select v-model=\"server.type\" name=\"\" id=\"\">\n                <option value=\"UAT\">UAT</option>\n                <option value=\"PROD\">Prod</option>\n            </select>\n        </template>\n        <temaplate #ContainerAddButton >\n            \n        </temaplate>\n        <template #Containers>\n            <tableExtension>\n                <template #tableHeaders>\n                    <td>Name</td>\n                    <td>Added by</td>\n                    <td>Actions</td>\n                </template>\n                <template #tableRows>\n                    <tr v-for=\"container, index in server.containers\" :key=\"index\">\n                        <td class=\"server-name\">{{ container.name }}</td>\n                        <td>\n                            <p>{{ container.addedBy }}</p>\n                        </td>\n                        <td>\n                            <p>Actions</p>\n                        </td>\n                    </tr>\n                </template>\n            </tableExtension>\n        </template>\n        <template #Footer>\n            <buttonValidation @click=\"updateServer()\" :ok=\"true\" :type=\"'submit'\">\n                <template #textButton>\n                    Save changes\n                </template>\n            </buttonValidation>\n            <buttonValidation @click=\"$router.back()\" :danger=\"true\" :type=\"'submit'\">\n                <template #textButton>\n                    Cancel\n                </template>\n            </buttonValidation>\n        </template>\n        <template #popUps>\n            <popupDisplay v-if=\"popUpBoolean\" @close-popup=\"popUpBoolean = false;\">\n                <template #titel>New global input</template>\n                <template #content>\n                    <div class=\"input-holder\"\n                        style=\"display: flex;flex-direction: row;justify-content: flex-start;align-items :center; gap:5px;\">\n                        <label for=\"type\">Input type: </label>\n                        <select name=\"type\" v-model=\"inputPopUP.type\">\n                            <option value=\"text\">Text</option>\n                            <option value=\"email\">Email</option>\n                            <option value=\"date\">Date</option>\n                            <option value=\"number\">Number</option>\n                        </select>\n                    </div>\n                    <div class=\"input-holder\"\n                        style=\"display: flex;flex-direction: row;justify-content: flex-start;align-items :center; gap:5px;\">\n                        <label for=\"\">Input label</label>\n                        <input type=\"text\" placeholder=\"Input label...\" v-model=\"inputPopUP.label\">\n                    </div>\n                    <buttonValidation :ok=\"true\" @click=\"pushInput\"\n                        style=\" padding: 2px;width: 50%;align-self: flex-end;\">\n                        <template #textButton>\n                            Add\n                        </template>\n                    </buttonValidation>\n                </template>\n            </popupDisplay>\n        </template>\n\n    </interractionLayout>\n\n\n</template>\n<script>\nimport apiFetch from \"@/common/api.service\"\n\nimport interractionLayout from \"./interraction-layout.vue\"\n\nimport buttonValidation from \"@/components/interraction/buttons/validation-button.vue\"\nimport popupDisplay from \"@/components/interraction/popups/popup-display.vue\"\nimport tableExtension from \"@/components/interraction/tables/table-withextension.vue\"\nexport default{\n    name : 'show-server',\n    data(){\n        return{\n            server : {\n                name : '' ,\n                ip : '',\n                type : \"UAT\" ,\n                containers : [],\n            },\n            oldServer : {\n                name : '' ,\n                ip : '',\n                type : \"UAT\" ,\n                containers : [],\n            },\n            popUpBoolean : false,\n            inputPopUP :  {\n                    label : \"\",\n                    type : \"\",\n                    id : null\n                }\n        }\n    },\n    components: {\n        buttonValidation,\n        tableExtension,\n        interractionLayout,\n        popupDisplay\n    },\n    methods : {\n        updateServer(){\n            this.keepUpdatedValue(this.oldServer,this.server,[\"id\"]);\n            console.log(\"sending\",this.server)\n\n            let endpoint = '/server/edit';\n            apiFetch.update(endpoint,\n            {...this.server},\n            true,\n            false)\n            .then(()=>{\n                this.$router.push({name : 'serverShow' , params : { id : this.server.id}})\n            })\n        },\n        keepUpdatedValue(oldObject, newObject, dontCheck) {\n            for (const prop of Object.getOwnPropertyNames(oldObject)) {\n                if (oldObject[prop] == newObject[prop] && !(dontCheck.includes(prop))) {\n                    newObject[prop] = null;\n                }\n            }\n        },\n    },\n    beforeMount(){\n        if(this.$route.query.name){\n            this.server.name= this.$route.query.name\n        }\n        if(this.$route.query.type){\n            this.server.type= this.$route.query.type\n        }\n        if(this.$route.query.ip){\n            this.server.ip= this.$route.query.ip\n        }\n\n        let endpoint = \"/server/\"+this.$route.params.id;\n        apiFetch.get(endpoint,false)\n        .then((server)=>{\n            this.server = server;\n            this.oldServer =Object.assign({}, this.server); \n        })\n    }\n}\n</script>\n<style scoped>\n\n\n.form-holder form{\n    grid-template-columns: 1fr 1fr;\n\n\n}\n.form-holder form .input-name {\n    grid-area: 1/1/2/2;\n}\n.form-holder form .input-name input, .form-holder form .input-type select{\n    width: 100%;\n}\n.form-holder form .input-ip {\n    grid-area: 2/1/3/3;\n}\n.form-holder form .input-type {\n    grid-area: 1/2/2/3;\n}\n.form-holder .containers{\n\n    grid-column: 1/3 ;\n    grid-row: 3/5;\n\n    height: 100%;\n    width: 100%;\n}\n\n.add-option{\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n.global-inputs{\n    min-height: 50px;\n\n    width: 100%;\n    max-height: 100%;\n\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: center;\n\n    gap: 10px;\n\n    overflow-x: auto;\n}\n.global-input{\n    width: fit-content;\n    background-color: white;\n\n    display: grid;\n    grid-template-columns: 1fr auto;\n    grid-template-rows: 1fr 1fr ;\n\n    gap: 10px;\n}\n.global-input input{\n    width: 100%;\n\n    grid-column : 1/3;\n}\n.global-input svg:hover{\n    cursor: pointer;\n}\n\n.form-holder .table-containers{\n    width: 100%;\n    height: 100%;\n}\n\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}