{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport apiFetch from \"@/common/api.service\";\nimport interractionLayout from \"./interraction-layout.vue\";\nimport buttonValidation from \"@/components/interraction/buttons/validation-button.vue\";\nimport tableExtension from \"@/components/interraction/tables/table-withextension.vue\";\nexport default {\n  name: 'create-server',\n  data() {\n    return {\n      server: {\n        name: '',\n        ip: '',\n        type: \"UAT\",\n        containers: []\n      }\n    };\n  },\n  components: {\n    buttonValidation,\n    tableExtension,\n    interractionLayout\n  },\n  methods: {\n    createServer() {\n      let endpoint = '/server/create';\n      apiFetch.post(endpoint, {\n        ...this.server\n      }, true, false).then(result => {\n        this.$router.push({\n          name: 'serverShow',\n          params: {\n            id: result.id\n          }\n        });\n      });\n    }\n  }\n};","map":{"version":3,"names":["apiFetch","interractionLayout","buttonValidation","tableExtension","name","data","server","ip","type","containers","components","methods","createServer","endpoint","post","then","result","$router","push","params","id"],"sources":["/Users/abdelmadjidbelhanafi/Documents/vsc project/Natixis/new-banxy-rest-api/frontend/src/views/servers/create.vue"],"sourcesContent":["<template>\n\n    <interractionLayout :forbiddenContainers=\"true\" >\n\n        <template #Header>\n            Creating a new server\n        </template>\n        <template #InputName>\n            <input type=\"text\" placeholder=\"Server name...\" v-model=\"server.name\">\n        </template>\n        <template #InputIp>\n            <input type=\"text\" placeholder=\"Server ip address...\" v-model=\"server.ip\">\n        </template>\n        <template #InputType>\n            <select v-model=\"server.type\" name=\"\" id=\"\">\n                <option value=\"UAT\">UAT</option>\n                <option value=\"PROD\">Prod</option>\n            </select>\n        </template>\n        <template #Containers>\n            <tableExtension>\n                <template #tableHeaders>\n                    <td>Name</td>\n                    <td>Added by</td>\n                    <td>Actions</td>\n                </template>\n                <template #tableRows>\n                    <tr v-for=\"container, index in server.containers\" :key=\"index\">\n                        <td class=\"server-name\">{{ container.name }}</td>\n                        <td>\n                            <p>{{ container.addedBy }}</p>\n                        </td>\n                        <td>\n                            <p>Actions</p>\n                        </td>\n                    </tr>\n                </template>\n            </tableExtension>\n        </template>\n        <template #Footer>\n            <buttonValidation  @click=\"createServer()\" :ok=\"true\" :type=\"'submit'\">\n                <template #textButton>\n                    Create\n                </template>\n            </buttonValidation>\n        </template>\n        <template #popUps>\n\n        </template>\n\n    </interractionLayout>\n\n\n</template>\n<script>\nimport apiFetch from \"@/common/api.service\"\n\nimport interractionLayout from \"./interraction-layout.vue\"\n\nimport buttonValidation from \"@/components/interraction/buttons/validation-button.vue\"\nimport tableExtension from \"@/components/interraction/tables/table-withextension.vue\"\nexport default{\n    name : 'create-server',\n    data(){\n        return{\n            server : {\n                name : '' ,\n                ip : '',\n                type : \"UAT\" ,\n                containers : [],\n            }\n        }\n    },\n    components: {\n        buttonValidation,\n        tableExtension,\n        interractionLayout\n    },\n    methods : {\n        createServer(){\n            let endpoint = '/server/create';\n            apiFetch.post(endpoint,\n            {...this.server},\n            true,\n            false)\n            .then((result)=>{\n                this.$router.push({name : 'serverShow' , params : { id : result.id}})\n            })\n        }\n    }\n}\n</script>\n<style scoped>\n\n\n.form-holder form{\n    grid-template-columns: 1fr 1fr;\n\n\n}\n.form-holder form .input-name {\n    grid-area: 1/1/2/2;\n}\n.form-holder form .input-name input, .form-holder form .input-type select{\n    width: 100%;\n}\n.form-holder form .input-ip {\n    grid-area: 2/1/3/3;\n}\n.form-holder form .input-type {\n    grid-area: 1/2/2/3;\n}\n.form-holder .containers{\n\n    grid-column: 1/3 ;\n    grid-row: 3/5;\n\n    height: 100%;\n    width: 100%;\n}\n\n.add-option{\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n.global-inputs{\n    min-height: 50px;\n\n    width: 100%;\n    max-height: 100%;\n\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: center;\n\n    gap: 10px;\n\n    overflow-x: auto;\n}\n.global-input{\n    width: fit-content;\n    background-color: white;\n\n    display: grid;\n    grid-template-columns: 1fr auto;\n    grid-template-rows: 1fr 1fr ;\n\n    gap: 10px;\n}\n.global-input input{\n    width: 100%;\n\n    grid-column : 1/3;\n}\n.global-input svg:hover{\n    cursor: pointer;\n}\n\n.form-holder .table-containers{\n    width: 100%;\n    height: 100%;\n}\n\n.buttons-footer{\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n\n    padding: var(--extra-small-padding);\n    box-sizing: border-box;\n\n    width: 100%;\n\n    background-color: red;\n}\n\n</style>"],"mappings":";AAuDA,OAAOA,QAAO,MAAO,sBAAqB;AAE1C,OAAOC,kBAAiB,MAAO,2BAA0B;AAEzD,OAAOC,gBAAe,MAAO,yDAAwD;AACrF,OAAOC,cAAa,MAAO,0DAAyD;AACpF,eAAc;EACVC,IAAG,EAAI,eAAe;EACtBC,IAAIA,CAAA,EAAE;IACF,OAAM;MACFC,MAAK,EAAI;QACLF,IAAG,EAAI,EAAC;QACRG,EAAC,EAAI,EAAE;QACPC,IAAG,EAAI,KAAI;QACXC,UAAS,EAAI;MACjB;IACJ;EACJ,CAAC;EACDC,UAAU,EAAE;IACRR,gBAAgB;IAChBC,cAAc;IACdF;EACJ,CAAC;EACDU,OAAM,EAAI;IACNC,YAAYA,CAAA,EAAE;MACV,IAAIC,QAAO,GAAI,gBAAgB;MAC/Bb,QAAQ,CAACc,IAAI,CAACD,QAAQ,EACtB;QAAC,GAAG,IAAI,CAACP;MAAM,CAAC,EAChB,IAAI,EACJ,KAAK,EACJS,IAAI,CAAEC,MAAM,IAAG;QACZ,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC;UAACd,IAAG,EAAI,YAAW;UAAIe,MAAK,EAAI;YAAEC,EAAC,EAAIJ,MAAM,CAACI;UAAE;QAAC,CAAC;MACxE,CAAC;IACL;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}