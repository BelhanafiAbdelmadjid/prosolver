{"ast":null,"code":"import apiFetch from \"@/common/api.service\";\nimport interraction from \"./interraction-script.vue\";\nimport buttonValidation from \"@/components/interraction/buttons/validation-button.vue\";\nexport default {\n  name: 'script-create',\n  components: {\n    interraction,\n    buttonValidation\n  },\n  data() {\n    return {\n      step: {\n        name: '',\n        server: {\n          id: null\n        },\n        container: {\n          id: null\n        },\n        script: {\n          id: null\n        },\n        inputs: []\n      },\n      req: {\n        scripts: [],\n        servers: []\n      },\n      selectContainer: false,\n      containersSelect: []\n    };\n  },\n  watch: {\n    'step.server'() {\n      let server = this.req.servers.filter(server => server.id === this.step.server.id);\n      console.log(server);\n      this.containersSelect = server[0].containers;\n    },\n    selectContainer(newV, oldV) {\n      if (oldV == false && newV == true) {\n        if (this.step.server == null) {\n          this.emitter.emit(\"sidebar-error\", {\n            error: true,\n            description: 'Please select a server first.'\n          });\n          this.selectContainer = false;\n        }\n      } else if (oldV == true && newV == false) {\n        this.containersSelect = [];\n      }\n    },\n    'step.script'() {\n      let endpoint = '/incident/' + this.$route.params.id + '/script/' + this.step.script + '/join';\n      apiFetch.get(endpoint, false).then(inputs => {\n        this.step.inputs = inputs;\n      });\n    }\n  },\n  beforeMount() {\n    // incident/3/step/create\n\n    let endpoint = '/incident/' + this.$route.params.id + '/step/' + this.$route.params.stepID;\n    apiFetch.get(endpoint, false).then(req => {\n      this.step = req;\n\n      // this.selectContainer = this.step.container != null ? true : false\n    });\n    let endpoint2 = '/incident/' + this.$route.params.id + '/step/create';\n    apiFetch.get(endpoint2, false).then(req => {\n      this.req = req;\n    });\n  },\n  methods: {\n    createStep() {\n      for (let input of this.step.inputs) {\n        if (input.fromIncident == true) {\n          input.parentInput = input.incidentID;\n        }\n      }\n      let endpoint = '/incident/step/create';\n      apiFetch.post(endpoint, {\n        incident: this.$route.params.id,\n        server: this.step.server,\n        script: this.step.script,\n        container: this.step.container,\n        name: this.step.name,\n        inputs: this.step.inputs\n      }, true, false).then(res => {\n        console.log(res);\n      });\n    }\n  }\n};","map":{"version":3,"names":["apiFetch","interraction","buttonValidation","name","components","data","step","server","id","container","script","inputs","req","scripts","servers","selectContainer","containersSelect","watch","step.server","filter","console","log","containers","newV","oldV","emitter","emit","error","description","step.script","endpoint","$route","params","get","then","beforeMount","stepID","endpoint2","methods","createStep","input","fromIncident","parentInput","incidentID","post","incident","res"],"sources":["/Users/abdelmadjidbelhanafi/Documents/vsc project/Natixis/new-banxy-rest-api/frontend/src/views/steps/edit.vue"],"sourcesContent":["<template>\n    <interraction :forbiddenInputs=\"true\" >\n        <template #ScriptHeader >Creating new step</template>\n\n\n        <template #InputName >\n            <input  v-model=\"step.name\"  type=\"text\">\n        </template>\n        <template #InputScript >\n            <select  v-model=\"step.script.id\" >\n                <option v-for=\"script in req.scripts\" :key=\"script.id\" :value=\"script.id\">{{ script.name+'.'+script.language }}</option>\n            </select>\n        </template>\n        <template #InputServer >\n            <select  v-model=\"step.server.id\"  >\n                <option v-for=\"server in req.servers\" :key=\"server.id\" :value=\"server.id\">{{ server.name }}</option>\n            </select>\n        </template>\n        <template #InputContainerChekbox >\n            <input type=\"checkbox\" v-model=\"selectContainer\" name=\"\" id=\"\">\n        </template>\n        <template v-if=\"selectContainer\" #InputContainer >\n            <select  v-model=\"step.container\"  >\n                <option v-for=\"container in containersSelect\" :key=\"container.id\" :value=\"container.id\">{{ container.name}}</option>\n            </select>\n        </template>\n\n\n\n        <template #GlobalInputListing >\n            <div style=\"height: 100%;width: 100%;\" >\n                <div class=\"input-config-holder\" v-for=\"input,index in step.inputs\" :key=\"index\" >\n                    <div class=\"input-config-line\"   v-if=\"input.fromIncident\" >\n                        <p>Make <strong> {{ input.label +' ' }}</strong> input global.</p>\n                        <input type=\"checkbox\" v-model=\"input.fromIncident\">\n                    </div>\n                    <div class=\"input-config-line\"  v-else >\n                        <p>Local <strong> {{ input.label +' ' }} </strong> input.</p>\n                    </div>\n                    \n                </div>\n            </div>\n        </template>\n        <template #Footer >\n            <buttonValidation style=\"width: 100%;\"  @click=\"createStep()\" :warning=\"true\" :type=\"'submit'\">\n                <template #textButton>\n                    Edit\n                </template>\n            </buttonValidation>\n        </template> \n\n        <template #popUps >\n            \n        </template>\n\n    </interraction>\n</template>\n<script>\nimport apiFetch from \"@/common/api.service\"\nimport interraction from \"./interraction-script.vue\"\nimport buttonValidation from \"@/components/interraction/buttons/validation-button.vue\"\nexport default{\n    name : 'script-create',\n    components : {\n        interraction,\n        buttonValidation\n    },\n    data(){\n        return{\n            step : {\n                name : '',\n                server : {\n                    id : null\n                } ,\n                container : {\n                    id : null\n                },\n                script : {\n                    id : null\n                },\n                inputs : []\n            },\n            req : {\n                scripts : [],\n                servers : [],\n            },\n            selectContainer : false,\n            containersSelect : []\n        }\n    },\n    watch : {\n        'step.server'(){\n            let server = this.req.servers.filter( server => server.id === this.step.server.id );\n            console.log(server)\n            this.containersSelect =  server[0].containers;\n        },\n        selectContainer(newV,oldV){\n            if(oldV == false && newV == true){\n                if(this.step.server == null){\n                    this.emitter.emit(\"sidebar-error\",{error : true , description : 'Please select a server first.'})\n                    this.selectContainer = false;\n                }\n            }else if(oldV == true && newV == false){\n                this.containersSelect = [];\n            }\n        },\n        'step.script'(){\n            let endpoint = '/incident/'+this.$route.params.id+'/script/'+this.step.script+'/join'\n            apiFetch.get(endpoint,false)\n            .then((inputs)=>{\n                this.step.inputs = inputs\n            })\n        }\n    },\n    beforeMount(){\n        // incident/3/step/create\n\n        let endpoint = '/incident/'+ this.$route.params.id+'/step/'+this.$route.params.stepID\n        apiFetch.get(endpoint,false)\n        .then((req)=>{\n            this.step= req;\n\n            // this.selectContainer = this.step.container != null ? true : false\n        })\n\n        let endpoint2 = '/incident/'+ this.$route.params.id+'/step/create'\n        apiFetch.get(endpoint2,false)\n        .then((req)=>{\n            this.req =req;\n        })\n    },\n    methods : {\n        createStep(){\n\n            for(let input of this.step.inputs){\n                if(input.fromIncident == true){\n                    input.parentInput = input.incidentID;\n                }\n            }\n\n            let endpoint = '/incident/step/create';\n            apiFetch.post(endpoint,{\n                incident : this.$route.params.id,\n                server : this.step.server,\n                script : this.step.script,\n                container : this.step.container,\n                name : this.step.name,\n                inputs : this.step.inputs\n            },\n            true,\n            false)\n            .then((res)=>{\n\n                console.log(res)\n            })\n\n        }\n    }\n}\n</script>\n<style scoped>\n.input-config-holder{\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    justify-content: flex-start;\n\n    gap: 5px;\n    box-sizing: border-box;\n\n    overflow-y: auto;\n\n    width: 100%;\n\n\n}\n.input-config-line{\n\n    width: 100%;\n\n    padding: var(--extra-small-padding);\n    box-sizing: border-box;\n\n    border: solid 1px black;\n    border-radius: 3px;\n\n    background-color: white;\n\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n\n    gap:3px;\n\n    margin-top: 5px;\n}\n.input-config-line:hover{\n    border: solid 1px var(--warm-color-1);\n}\n\n\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}