{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, withKeys as _withKeys, vModelText as _vModelText, resolveDirective as _resolveDirective, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-7ed39342\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"lineShell\"\n};\nconst _hoisted_2 = {\n  class: \"user\"\n};\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", null, \"@\", -1 /* HOISTED */));\nconst _hoisted_4 = {\n  class: \"server\"\n};\nconst _hoisted_5 = {\n  key: 1\n};\nconst _hoisted_6 = {\n  class: \"command\"\n};\nconst _hoisted_7 = {\n  class: \"result\"\n};\nconst _hoisted_8 = [\"onClick\"];\nexport function render(_ctx, _cache) {\n  const _directive_focus = _resolveDirective(\"focus\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"p\", null, [_createElementVNode(\"span\", _hoisted_2, _toDisplayString(_ctx.username), 1 /* TEXT */), _hoisted_3, _createElementVNode(\"span\", _hoisted_4, _toDisplayString(_ctx.server), 1 /* TEXT */), _ctx.cursor && _ctx.filled == '' && _ctx.last && _ctx.notWaitingForOutPut ? (_openBlock(), _createElementBlock(\"span\", {\n    key: 0,\n    class: _normalizeClass({\n      'typing-cursor': _ctx.last\n    })\n  }, \":$ ~\", 2 /* CLASS */)) : (_openBlock(), _createElementBlock(\"span\", _hoisted_5, \":$ ~\")), _createElementVNode(\"span\", _hoisted_6, _toDisplayString(_ctx.command), 1 /* TEXT */), _ctx.last && _ctx.notWaitingForOutPut ? _withDirectives((_openBlock(), _createElementBlock(\"input\", {\n    key: 2,\n    style: {\n      \"width\": \"fit-content\"\n    },\n    onFocusin: _cache[0] || (_cache[0] = (...args) => _ctx.removeCursor && _ctx.removeCursor(...args)),\n    onInput: _cache[1] || (_cache[1] = (...args) => _ctx.checkColor && _ctx.checkColor(...args)),\n    onKeydown: _cache[2] || (_cache[2] = _withKeys((...args) => _ctx.Sending && _ctx.Sending(...args), [\"enter\"])),\n    class: _normalizeClass([\"typeInput\", {\n      'yellow': _ctx.ok,\n      'red': !_ctx.ok\n    }]),\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => _ctx.filled = $event)\n  }, null, 34 /* CLASS, NEED_HYDRATION */)), [[_directive_focus], [_vModelText, _ctx.filled]]) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_7, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.result, (res, index) => {\n    return _openBlock(), _createElementBlock(\"p\", {\n      onClick: $event => _ctx.copyURL(res.value),\n      class: _normalizeClass([\"result-line\", {\n        'result-error': res.type == 'error',\n        'result-correct': res.type == 'correct',\n        'result-warning': res.type == 'warning'\n      }]),\n      key: index\n    }, _toDisplayString(res.value), 11 /* TEXT, CLASS, PROPS */, _hoisted_8);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["class","_createElementVNode","key","_createElementBlock","_hoisted_1","_hoisted_2","_toDisplayString","_ctx","username","_hoisted_3","_hoisted_4","server","cursor","filled","last","notWaitingForOutPut","_normalizeClass","_hoisted_5","_hoisted_6","command","style","onFocusin","_cache","args","removeCursor","onInput","checkColor","onKeydown","_withKeys","Sending","ok","$event","_createCommentVNode","_hoisted_7","_Fragment","_renderList","result","res","index","onClick","copyURL","value","type","_hoisted_8"],"sources":["/Users/abdelmadjidbelhanafi/Documents/vsc project/Natixis/new-banxy-rest-api/frontend/src/components/incident-execute/shellline.vue"],"sourcesContent":["<template>\n    <div class=\"lineShell\">\n        <p>\n            <span class=\"user\" >{{ username }}</span>\n            <span>@</span>\n            <span class=\"server\">{{ server }}</span>\n            <span v-if=\"cursor && filled == '' && last && notWaitingForOutPut\"  :class=\"{'typing-cursor' : last}\">:$ ~</span>\n            <span v-else >:$ ~</span>\n            <span  class=\"command\" >{{ command }}</span>\n            \n            <input v-focus style=\"width: fit-content;\"  v-if=\"last && notWaitingForOutPut\"  @focusin=\"removeCursor\"  @input=\"checkColor\" @keydown.enter=\"Sending\" class=\"typeInput \" :class=\"{'yellow' : ok,'red' : !ok}\"  v-model=\"filled\">\n        </p>\n        <div class=\"result\">\n            <p @click=\"copyURL(res.value)\" class=\"result-line\" :class=\"{'result-error' : (res.type == 'error'),'result-correct' : (res.type == 'correct'),'result-warning' : (res.type == 'warning')}\"  v-for=\"res,index in result\" :key=\"index\" >\n                {{ res.value }}\n            </p>\n        </div>\n\n    </div>\n</template>\n<script>\n export default {\n     name : \"lineShell-vue\",\n     components : {\n      \n     },\n   \n     data(){\n        return {\n            cursor : true,\n            filled : \"\",\n            ok : false,\n            \n            }\n     },methods:{\n        async copyURL(mytext) {\n             console.log(mytext)\n             await navigator.clipboard.writeText(mytext);\n             .then(()=>{\n                this.emitter.emit(\"sidebar-error\", {\n                 error: false,\n                 description: \"Copied successfully.\"\n             })\n             })\n\n        },\n        removeCursor(){\n        this.cursor = false;\n        },\n        addCursor(){\n        this.cursor = true;\n        },\n        checkColor(){\n        for(let lineOk in this.validCommands ){\n            if(this.validCommands[lineOk] == this.filled.trim()){\n            return this.ok = true;\n            }\n        }\n        return this.ok = false;\n\n        },\n        Sending(){\n            this.$emit(\"fill-shell\",(this.filled.trim()));\n            this.filled = \"\";\n        },\n      \n     },\n     props : [\"last\",\"result\",\"username\",\"command\",\"validCommands\",\"server\",\"notWaitingForOutPut\"],\n     mounted(){\n     }\n }\n</script>\n<style scoped>\n.result-line{\n    cursor: pointer;\n    transition: all 0.15s;\n    \n    width: 100%;\n\n\n}\n.result-line:hover{\n    opacity: 0.6;\n    background-color: white;\n    color: black;\n\n    padding: 3px;\n    box-sizing: border-box;\n}\n\n\n.result-error{\n  color: red;\n}\n\n.result-correct{\n  color: green;\n}\n.result-warning{\n    color : #EBFF04;\n}\n.result{\n  width: 100%;\n\n  box-sizing: border-box;\n  padding-top : 5px;\n\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: flex-start;\n  \n}\n.yellow{\n  color : yellow;\n}\n.red{\n  color : red;\n}\n.typeInput{\n    border: none;\n    outline: none;\n    padding: 0;\n    margin: 0;\n    background-color: transparent;\n\n    /* pointer-events: all; */\n    \n}\n.typing-cursor {\n    position : relative;\n}\n\n/* Define the CSS animation keyframes */\n@keyframes blinkCursor {\n  0% ,100% {\n    background-color: white;\n  }\n  50% {\n    background-color: transparent;\n  }\n\n}\n\n/* Apply the animation to the cursor bar when waiting for typing */\n.typing-cursor::after {\n    animation: blinkCursor 0.75s infinite;\n    position : absolute;\n    content: \"\";\n    display: inline-block;\n    width: 1px;\n    height: 14px;\n    right : -4px ;\n    \n}\n\n.input-container input {\n  border: 2px solid #333;\n  padding: 5px 10px;\n  font-size: 16px;\n  width: 300px;\n  outline: none; /* Remove default focus outline */\n}\n\n@keyframes blink {\n  0% {\n    border-color: #333;\n  }\n  50% {\n    border-color: transparent;\n  }\n  100% {\n    border-color: #333;\n  }\n}\n\n.input-container input:last-child::after {\n  content: \"\";\n  display: inline-block;\n  width: 2px;\n  height: 18px;\n  background-color: #333;\n  animation: blink 1s infinite;\n}\n.command{\n    margin-left : 5px;\n}\n.lineShell{\n    width: 100%;\n    color : white;\n    height: auto;\n}\n.user{\n    color : #CA3EFB;\n}\n.server{\n    color : #EBFF04;\n}\n.lineShell p{\n    font-size : 13px;\n    display: flex;\n    flex-direction: row;\n    flex-flow: wrap;\n}\n</style>  "],"mappings":";;;EACSA,KAAK,EAAC;AAAW;;EAERA,KAAK,EAAC;AAAM;gEAClBC,mBAAA,CAAc,cAAR,GAAC;;EACDD,KAAK,EAAC;AAAQ;;EALhCE,GAAA;AAAA;;EAQmBF,KAAK,EAAC;AAAS;;EAIrBA,KAAK,EAAC;AAAQ;mBAZ3B;;;uBACIG,mBAAA,CAiBM,OAjBNC,UAiBM,GAhBFH,mBAAA,CASI,YARAA,mBAAA,CAAyC,QAAzCI,UAAyC,EAAAC,gBAAA,CAAlBC,IAAA,CAAAC,QAAQ,kBAC/BC,UAAc,EACdR,mBAAA,CAAwC,QAAxCS,UAAwC,EAAAJ,gBAAA,CAAhBC,IAAA,CAAAI,MAAM,kBAClBJ,IAAA,CAAAK,MAAM,IAAIL,IAAA,CAAAM,MAAM,UAAUN,IAAA,CAAAO,IAAI,IAAIP,IAAA,CAAAQ,mBAAmB,I,cAAjEZ,mBAAA,CAAiH;IAN7HD,GAAA;IAMiFF,KAAK,EANtFgB,eAAA;MAAA,iBAM2GT,IAAA,CAAAO;IAAI;KAAG,MAAI,qB,cAC1GX,mBAAA,CAAyB,QAPrCc,UAAA,EAO0B,MAAI,IAClBhB,mBAAA,CAA4C,QAA5CiB,UAA4C,EAAAZ,gBAAA,CAAjBC,IAAA,CAAAY,OAAO,kBAEgBZ,IAAA,CAAAO,IAAI,IAAIP,IAAA,CAAAQ,mBAAmB,G,+BAA7EZ,mBAAA,CAAgO;IAV5OD,GAAA;IAU2BkB,KAA2B,EAA3B;MAAA;IAAA,CAA2B;IAAuCC,SAAO,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEhB,IAAA,CAAAiB,YAAA,IAAAjB,IAAA,CAAAiB,YAAA,IAAAD,IAAA,CAAY;IAAIE,OAAK,EAAAH,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEhB,IAAA,CAAAmB,UAAA,IAAAnB,IAAA,CAAAmB,UAAA,IAAAH,IAAA,CAAU;IAAGI,SAAO,EAAAL,MAAA,QAAAA,MAAA,MAVjJM,SAAA,KAAAL,IAAA,KAUyJhB,IAAA,CAAAsB,OAAA,IAAAtB,IAAA,CAAAsB,OAAA,IAAAN,IAAA,CAAO;IAAEvB,KAAK,EAVvKgB,eAAA,EAUwK,WAAY;MAAA,UAAqBT,IAAA,CAAAuB,EAAE;MAAA,QAAUvB,IAAA,CAAAuB;IAAE;IAVvN,uBAAAR,MAAA,QAAAA,MAAA,MAAAS,MAAA,IAUoOxB,IAAA,CAAAM,MAAM,GAAAkB,MAAA;gFAANxB,IAAA,CAAAM,MAAM,E,IAV1OmB,mBAAA,e,GAYQ/B,mBAAA,CAIM,OAJNgC,UAIM,I,kBAHF9B,mBAAA,CAEI+B,SAAA,QAfhBC,WAAA,CAa4N5B,IAAA,CAAA6B,MAAM,EAblO,CAa+MC,GAAG,EAACC,KAAK;yBAA5MnC,mBAAA,CAEI;MAFAoC,OAAK,EAAAR,MAAA,IAAExB,IAAA,CAAAiC,OAAO,CAACH,GAAG,CAACI,KAAK;MAAGzC,KAAK,EAbhDgB,eAAA,EAaiD,aAAa;QAAA,gBAA4BqB,GAAG,CAACK,IAAI;QAAA,kBAAiCL,GAAG,CAACK,IAAI;QAAA,kBAAmCL,GAAG,CAACK,IAAI;MAAA;MAA+CxC,GAAG,EAAEoC;wBACvND,GAAG,CAACI,KAAK,gCAd5BE,UAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}