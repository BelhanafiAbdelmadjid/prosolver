{"ast":null,"code":"import apiFetch from \"@/common/api.service.js\";\nimport { UseAuthStore } from \"@/store/store.js\";\nimport lineComponent from \"@/components/incident-execute/step-lines.vue\";\nexport default {\n  name: 'incident-execute',\n  data() {\n    return {\n      AuthStore: UseAuthStore(),\n      incident: {},\n      openBooleans: {},\n      notWaitingForOutPut: true\n    };\n  },\n  methods: {\n    onLoadStep(id) {\n      if (this.openBooleans[id] == true) {\n        this.openBooleans[id] = false;\n        return;\n      }\n      let i = 0;\n      for (var step of this.incident.steps) {\n        if (step.id == id) {\n          let endpoint = \"/incident/\" + this.incident.id + \"/step/\" + step.id;\n          apiFetch.get(endpoint, true).then(stepLoaded => {\n            this.incident.steps[i] = stepLoaded;\n            this.incident.steps[i].shell = [{\n              result: {\n                linesError: [],\n                linesResult: []\n              },\n              last: true\n            }];\n            this.openBooleans[id] = true;\n          });\n        }\n        i = i + 1;\n      }\n    },\n    onPushNewLine(result) {\n      for (let step of this.incident.steps) {\n        if (step.id == result.id) {\n          step.shell.splice(step.shell.length - 1, 0, {\n            command: result.command,\n            result: {\n              linesError: [],\n              linesResult: this.formatStringWithLineBreaks(result.result)\n            },\n            last: false\n          });\n        }\n      }\n    },\n    onClearLines(id) {\n      for (let step of this.incident.steps) {\n        if (step.id == id) {\n          step.shell = [{\n            command: 'clear',\n            result: {\n              linesError: [],\n              linesResult: []\n            },\n            last: false\n          }, {\n            result: {\n              linesError: [],\n              linesResult: []\n            },\n            last: true\n          }];\n        }\n      }\n    },\n    formatStringWithLineBreaks(str) {\n      return str;\n    },\n    async ExecuteStep(step) {\n      this.notWaitingForOutPut = false;\n      await step.execute(this.incident.globalInputs).then(result => {\n        step.shell.splice(step.shell.length - 1, 0, {\n          command: \"exec\",\n          result: {\n            linesError: this.formatStringWithLineBreaks(result.error),\n            linesResult: this.formatStringWithLineBreaks(result.result)\n          },\n          //here you can replace \\n with <br>\n          last: false\n        });\n        this.notWaitingForOutPut = true;\n      }).catch(err => {\n        console.log(err);\n        // this.emitter.emit(\"sidebar-error\",err);\n        step.shell.splice(step.shell.length - 1, 0, {\n          command: \"exec\",\n          result: {\n            linesError: this.formatStringWithLineBreaks(err),\n            linesResult: []\n          },\n          last: false\n        });\n        this.notWaitingForOutPut = true;\n      });\n    },\n    lookForGlobalInput(input) {\n      console.log(\"Global inputs\", this.incident.globalInputs);\n      console.log(\"input fetching with\", input);\n      let res = this.incident.globalInputs.find(item => item.id == input.idParent);\n      input.value = res.value;\n      return res;\n    }\n  },\n  components: {\n    lineComponent\n  },\n  beforeMount() {\n    let endpoint = \"/incident/\" + this.$route.params.id;\n    apiFetch.get(endpoint, true, false).then(incident => {\n      this.incident = incident;\n    });\n  }\n};","map":{"version":3,"names":["apiFetch","UseAuthStore","lineComponent","name","data","AuthStore","incident","openBooleans","notWaitingForOutPut","methods","onLoadStep","id","i","step","steps","endpoint","get","then","stepLoaded","shell","result","linesError","linesResult","last","onPushNewLine","splice","length","command","formatStringWithLineBreaks","onClearLines","str","ExecuteStep","execute","globalInputs","error","catch","err","console","log","lookForGlobalInput","input","res","find","item","idParent","value","components","beforeMount","$route","params"],"sources":["/Users/abdelmadjidbelhanafi/Documents/vsc project/Natixis/new-banxy-rest-api/frontend/src/views/incidents/execute.vue"],"sourcesContent":["<template>\n    <div class=\"holders execution-holder\">\n        <div class=\"header colorfull-gradient-1\">\n            Executing incident\n        </div>\n        <div\n            style=\"box-sizing:border-box; padding: 10px; background-color:rgb(240, 240, 240); border-radius: 10px; display:grid;grid-template-rows:auto; gap:10px;\">\n            <p>\n                <strong>Global inputs </strong>\n            </p>\n            <div class=\"input-holders\"\n                style=\"padding:0px;display: flex;flex-direction: row;justify-content: flex-start;align-items :center; gap:5px;\"\n                v-for=\"npt,index in incident.inputs\" :key=\"index\">\n                <label>{{ npt.label }}</label>\n                <input :placeholder=\"npt.label\" :type=\"npt.type\" v-model=\"npt.value\" required>\n            </div>\n        </div>\n        <div class=\"steps\">\n   \n        </div>\n    </div>\n</template>\n\n<script>\nimport apiFetch from \"@/common/api.service.js\"\nimport { UseAuthStore } from \"@/store/store.js\"\n\nimport lineComponent from \"@/components/incident-execute/step-lines.vue\"\n\nexport default{\n    name : 'incident-execute',\n    data(){\n        return {\n            AuthStore : UseAuthStore(),\n            incident: {\n\n            },\n            openBooleans : {},\n            notWaitingForOutPut : true,\n        }\n    },\n    methods : {\n        onLoadStep(id){\n            if(this.openBooleans[id] == true){\n                this.openBooleans[id] = false;\n                return;\n            }\n            let i =0\n            for(var step of this.incident.steps){\n                if(step.id == id){\n                    let endpoint = \"/incident/\"+this.incident.id+\"/step/\"+step.id;\n                    apiFetch.get(endpoint,true)\n                    .then((stepLoaded)=>{\n                        this.incident.steps[i]  = stepLoaded;\n                        this.incident.steps[i].shell = [{\n                                    result : {  \n                                        linesError : [],\n                                        linesResult : [],\n                                    },\n                                    last : true ,\n                                }];\n                        this.openBooleans[id] = true;\n                    })\n                }\n                i = i + 1;\n            }\n        },\n        onPushNewLine(result){\n            for(let step of this.incident.steps){\n                if(step.id == result.id){\n                    step.shell.splice(step.shell.length -1  , 0 , {\n                        command : result.command,\n                        result : {\n                            linesError : [],\n                            linesResult : this.formatStringWithLineBreaks(result.result),\n                        },\n                        last : false,\n                    })\n                }\n        }\n        },\n        onClearLines(id){\n            for(let step of this.incident.steps){\n                if(step.id == id){\n                    step.shell = [{\n                command : 'clear',\n                result : {\n                    linesError : [],\n                    linesResult : [],\n                },\n                last : false ,\n            },\n            {\n                result : {\n                    linesError : [],\n                    linesResult : [],\n                },\n                last : true ,\n            }];\n                }\n            }\n           \n        },\n        formatStringWithLineBreaks(str) {\n            return str;\n        },\n        async ExecuteStep(step){ \n        \n            this.notWaitingForOutPut = false;\n            await step.execute(this.incident.globalInputs)\n            .then((result)=>{\n                    step.shell.splice(step.shell.length -1  , 0 , {\n                        command : \"exec\",\n                        result : {\n                            linesError : this.formatStringWithLineBreaks(result.error),\n                            linesResult : this.formatStringWithLineBreaks(result.result)\n                        },\n                        //here you can replace \\n with <br>\n                        last : false ,\n                    })\n                    this.notWaitingForOutPut = true;\n                \n            })\n            .catch((err)=>{\n                console.log(err)\n                // this.emitter.emit(\"sidebar-error\",err);\n                step.shell.splice(step.shell.length -1  , 0 , {\n                        command : \"exec\",\n                        result : {\n                            linesError : this.formatStringWithLineBreaks(err),\n                            linesResult : [],\n                        },\n                        last : false ,\n                    })\n                    this.notWaitingForOutPut = true;\n            })\n            \n            \n        },\n        lookForGlobalInput(input){\n            console.log(\"Global inputs\",this.incident.globalInputs)\n            console.log(\"input fetching with\",input);\n            let res = this.incident.globalInputs.find(item => item.id == input.idParent);\n            input.value = res.value;\n            return res;\n        },\n    },\n    components : {\n        lineComponent\n    },\n    beforeMount(){\n        let endpoint = \"/incident/\"+ this.$route.params.id ;\n        apiFetch.get(endpoint,true,false)\n        .then((incident)=>{\n            this.incident = incident;\n        })\n    }\n}\n</script>\n<style scoped>\n.execution-holder{\n    width: 100%;\n    height: 100%;\n\n    display: grid;\n    grid-template-rows: auto auto 1fr;\n}\n.execution-holder .header{\n    padding: 10px;\n    box-sizing: border-box;\n\n    font-size: 24px;\n    font-weight: 700;\n\n    color :white;\n}\n.execution-holder .steps{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: flex-start;\n\n    gap: 5px;\n\n    overflow-y: auto;\n}\n\n\n\n\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}