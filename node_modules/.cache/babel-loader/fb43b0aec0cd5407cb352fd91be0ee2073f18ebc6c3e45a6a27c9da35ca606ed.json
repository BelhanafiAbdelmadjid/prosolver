{"ast":null,"code":"import _defineProperty from \"/Users/abdelmadjidbelhanafi/Documents/vsc project/Natixis/new-banxy-rest-api/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport toolKit from \"@/main.js\";\nimport axios from \"axios\";\nexport default class apiFetch {\n  static get(endpoint, emit, throwErr) {\n    if (throwErr == null) {\n      throwErr = false;\n    }\n    return new Promise((resolve, reject) => {\n      axios({\n        method: \"GET\",\n        url: this.BASE_URL + endpoint,\n        withCredentials: true,\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        console.log(response.headers);\n        if (response.status == 401) {\n          toolKit.router.push('/login');\n        }\n        response.json().then(data => {\n          if (emit) {\n            toolKit.emitter.emit(\"sidebar-error\", {\n              error: response.ok,\n              description: data.msg\n            });\n          }\n          if (response.ok) {\n            resolve(data);\n          } else if (throwErr == true && !response.ok) {\n            reject(data);\n          }\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    });\n  }\n  static post(endpoint, payload, emit, throwError) {\n    return new Promise((resolve, reject) => {\n      fetch(this.BASE_URL + endpoint, {\n        method: \"POST\",\n        url: this.BASE_URL + endpoint,\n        withCredentials: true,\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        ...JSON.stringify({\n          ...payload\n        })\n      }).then(response => {\n        console.log(response.headers);\n        response.json().then(data => {\n          if (response.status == 401) {\n            toolKit.router.push('/login');\n          }\n          if (response.ok) {\n            resolve(data);\n          } else {\n            if (throwError) {\n              reject(data);\n            }\n          }\n          if (emit) {\n            toolKit.emitter.emit(\"sidebar-error\", {\n              error: !response.ok,\n              description: data.msg\n            });\n          }\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    });\n  }\n  static update(endpoint, payload, emit, throwError) {\n    return new Promise((resolve, reject) => {\n      fetch(this.BASE_URL + endpoint, {\n        method: \"PUT\",\n        credentials: \"include\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          ...payload\n        })\n      }).then(response => {\n        response.json().then(data => {\n          if (response.status == 401) {\n            toolKit.router.push('/login');\n          }\n          if (response.ok) {\n            resolve(data);\n          } else {\n            if (throwError) {\n              reject(data);\n            }\n          }\n          if (emit) {\n            toolKit.emitter.emit(\"sidebar-error\", {\n              error: !response.ok,\n              description: data.msg\n            });\n          }\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    });\n  }\n  static delete(endpoint, payload, emit, throwError) {\n    return new Promise((resolve, reject) => {\n      fetch(this.BASE_URL + endpoint, {\n        method: \"DELETE\",\n        credentials: \"include\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          ...payload\n        })\n      }).then(response => {\n        response.json().then(data => {\n          if (response.status == 401) {\n            toolKit.router.push('/login');\n          }\n          if (response.ok) {\n            resolve(data);\n          } else {\n            if (throwError) {\n              reject(data);\n            }\n          }\n          if (emit) {\n            toolKit.emitter.emit(\"sidebar-error\", {\n              error: !response.ok,\n              description: data.msg\n            });\n          }\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    });\n  }\n}\n\n// export default class apiFetch{\n//     static BASE_URL = \"http://192.168.1.56:5000/api\";\n//     static get(endpoint,emit,throwErr){\n//         if(throwErr == null){\n//             throwErr = false;\n//         }\n//         return new Promise((resolve,reject)=>{\n//             fetch(this.BASE_URL+endpoint,{\n//                 method: \"GET\",\n//                 credentials: \"include\", \n//                 headers: {\n//                     \"Content-Type\": \"application/json\",\n//                 }\n//             })\n//             .then((response)=>{\n//                 console.log(response.headers)\n//                 if(response.status == 401){\n//                     toolKit.router.push('/login')\n//                 }\n//                 response.json()\n//                 .then((data)=>{\n//                     if(emit){\n//                         toolKit.emitter.emit(\"sidebar-error\",{\n//                             error : response.ok,\n//                             description : data.msg\n//                         })\n//                     }\n//                     if(response.ok){\n//                         resolve(data);\n//                     }else if(throwErr == true && !response.ok){\n//                         reject(data);\n//                     }\n//                 })\n\n//             })\n//             .catch((err)=>{\n//                 console.log(err);\n//             })\n//         })\n//     }\n//     static post(endpoint,payload,emit,throwError){\n//         return new Promise((resolve,reject)=>{\n//             fetch(this.BASE_URL+endpoint,{\n//                 method: \"POST\",\n//                 credentials: \"include\", \n//                 headers: {\n//                     \"Content-Type\": \"application/json\",\n//                 },\n//                 body : JSON.stringify({ \n//                     ...payload\n//                   })\n//             })\n//             .then((response)=>{\n//                 console.log(response.headers)\n//                 response.json()\n//                 .then((data)=>{\n//                     if(response.status == 401){\n//                         toolKit.router.push('/login')\n//                     }\n//                     if(response.ok){\n//                         resolve(data);\n//                     }else{\n//                         if(throwError){\n//                             reject(data);\n//                         }\n//                     }\n//                     if(emit){\n//                         toolKit.emitter.emit(\"sidebar-error\",{\n//                             error : !response.ok,\n//                             description : data.msg\n//                         })\n//                     }\n//                 })\n\n//             })\n//             .catch((err)=>{\n//                 console.log(err)\n//             })\n//         })\n\n//     }\n//     static update(endpoint,payload,emit,throwError){\n//         return new Promise((resolve,reject)=>{\n//             fetch(this.BASE_URL+endpoint,{\n//                 method: \"PUT\",\n//                 credentials: \"include\", \n//                 headers: {\n//                     \"Content-Type\": \"application/json\",\n//                 },\n//                 body : JSON.stringify({ \n//                     ...payload\n//                   })\n//             })\n//             .then((response)=>{\n//                 response.json()\n//                 .then((data)=>{\n//                     if(response.status == 401){\n//                         toolKit.router.push('/login')\n//                     }\n//                     if(response.ok){\n//                         resolve(data);\n//                     }else{\n//                         if(throwError){\n//                             reject(data);\n//                         }\n//                     }\n//                     if(emit){\n//                         toolKit.emitter.emit(\"sidebar-error\",{\n//                             error : !response.ok,\n//                             description : data.msg\n//                         })\n//                     }\n//                 })\n\n//             })\n//             .catch((err)=>{\n//                 console.log(err)\n//             })\n//         })\n\n//     }\n//     static delete(endpoint,payload,emit,throwError){\n//         return new Promise((resolve,reject)=>{\n//             fetch(this.BASE_URL+endpoint,{\n//                 method: \"DELETE\",\n//                 credentials: \"include\", \n//                 headers: {\n//                     \"Content-Type\": \"application/json\",\n//                 },\n//                 body : JSON.stringify({ \n//                     ...payload\n//                   })\n//             })\n//             .then((response)=>{\n//                 response.json()\n//                 .then((data)=>{\n//                     if(response.status == 401){\n//                         toolKit.router.push('/login')\n//                     }\n//                     if(response.ok){\n//                         resolve(data);\n//                     }else{\n//                         if(throwError){\n//                             reject(data);\n//                         }\n//                     }\n//                     if(emit){\n//                         toolKit.emitter.emit(\"sidebar-error\",{\n//                             error : !response.ok,\n//                             description : data.msg\n//                         })\n//                     }\n//                 })\n\n//             })\n//             .catch((err)=>{\n//                 console.log(err)\n//             })\n//         })\n\n//     }\n// }\n\n// toolKit.router.beforeEach((to) => {\n//     if(to == \"supervision\" && toolKit.router.query.UAT == null && toolKit.router.query.Prod == null){\n//         toolKit.router.query.UAT = true;\n//     }\n//     return false\n//   })\n_defineProperty(apiFetch, \"BASE_URL\", \"http://192.168.1.56:5000/api\");","map":{"version":3,"names":["toolKit","axios","apiFetch","get","endpoint","emit","throwErr","Promise","resolve","reject","method","url","BASE_URL","withCredentials","headers","then","response","console","log","status","router","push","json","data","emitter","error","ok","description","msg","catch","err","post","payload","throwError","fetch","JSON","stringify","update","credentials","body","delete","_defineProperty"],"sources":["/Users/abdelmadjidbelhanafi/Documents/vsc project/Natixis/new-banxy-rest-api/frontend/src/common/api.service.js"],"sourcesContent":["\nimport toolKit from \"@/main.js\"\nimport axios from \"axios\";\nexport default class apiFetch{\n    static BASE_URL = \"http://192.168.1.56:5000/api\";\n    static get(endpoint,emit,throwErr){\n        if(throwErr == null){\n            throwErr = false;\n        }\n        return new Promise((resolve,reject)=>{\n            axios({\n                method: \"GET\",\n                url : this.BASE_URL+endpoint,\n                withCredentials: true, \n                headers: {\n                    \"Content-Type\": \"application/json\",\n                }\n            })\n            .then((response)=>{\n                console.log(response.headers)\n                if(response.status == 401){\n                    toolKit.router.push('/login')\n                }\n                response.json()\n                .then((data)=>{\n                    if(emit){\n                        toolKit.emitter.emit(\"sidebar-error\",{\n                            error : response.ok,\n                            description : data.msg\n                        })\n                    }\n                    if(response.ok){\n                        resolve(data);\n                    }else if(throwErr == true && !response.ok){\n                        reject(data);\n                    }\n                })\n                \n            })\n            .catch((err)=>{\n                console.log(err);\n            })\n        })\n    }\n    static post(endpoint,payload,emit,throwError){\n        return new Promise((resolve,reject)=>{\n            fetch(this.BASE_URL+endpoint,{\n                method: \"POST\",\n                url : this.BASE_URL+endpoint,\n                withCredentials: true, \n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                ...JSON.stringify({ \n                    ...payload\n                  })\n            })\n            .then((response)=>{\n                console.log(response.headers)\n                response.json()\n                .then((data)=>{\n                    if(response.status == 401){\n                        toolKit.router.push('/login')\n                    }\n                    if(response.ok){\n                        resolve(data);\n                    }else{\n                        if(throwError){\n                            reject(data);\n                        }\n                    }\n                    if(emit){\n                        toolKit.emitter.emit(\"sidebar-error\",{\n                            error : !response.ok,\n                            description : data.msg\n                        })\n                    }\n                })\n                \n            })\n            .catch((err)=>{\n                console.log(err)\n            })\n        })\n\n    }\n    static update(endpoint,payload,emit,throwError){\n        return new Promise((resolve,reject)=>{\n            fetch(this.BASE_URL+endpoint,{\n                method: \"PUT\",\n                credentials: \"include\", \n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body : JSON.stringify({ \n                    ...payload\n                  })\n            })\n            .then((response)=>{\n                response.json()\n                .then((data)=>{\n                    if(response.status == 401){\n                        toolKit.router.push('/login')\n                    }\n                    if(response.ok){\n                        resolve(data);\n                    }else{\n                        if(throwError){\n                            reject(data);\n                        }\n                    }\n                    if(emit){\n                        toolKit.emitter.emit(\"sidebar-error\",{\n                            error : !response.ok,\n                            description : data.msg\n                        })\n                    }\n                })\n                \n            })\n            .catch((err)=>{\n                console.log(err)\n            })\n        })\n\n    }\n    static delete(endpoint,payload,emit,throwError){\n        return new Promise((resolve,reject)=>{\n            fetch(this.BASE_URL+endpoint,{\n                method: \"DELETE\",\n                credentials: \"include\", \n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body : JSON.stringify({ \n                    ...payload\n                  })\n            })\n            .then((response)=>{\n                response.json()\n                .then((data)=>{\n                    if(response.status == 401){\n                        toolKit.router.push('/login')\n                    }\n                    if(response.ok){\n                        resolve(data);\n                    }else{\n                        if(throwError){\n                            reject(data);\n                        }\n                    }\n                    if(emit){\n                        toolKit.emitter.emit(\"sidebar-error\",{\n                            error : !response.ok,\n                            description : data.msg\n                        })\n                    }\n                })\n                \n            })\n            .catch((err)=>{\n                console.log(err)\n            })\n        })\n\n    }\n}\n\n// export default class apiFetch{\n//     static BASE_URL = \"http://192.168.1.56:5000/api\";\n//     static get(endpoint,emit,throwErr){\n//         if(throwErr == null){\n//             throwErr = false;\n//         }\n//         return new Promise((resolve,reject)=>{\n//             fetch(this.BASE_URL+endpoint,{\n//                 method: \"GET\",\n//                 credentials: \"include\", \n//                 headers: {\n//                     \"Content-Type\": \"application/json\",\n//                 }\n//             })\n//             .then((response)=>{\n//                 console.log(response.headers)\n//                 if(response.status == 401){\n//                     toolKit.router.push('/login')\n//                 }\n//                 response.json()\n//                 .then((data)=>{\n//                     if(emit){\n//                         toolKit.emitter.emit(\"sidebar-error\",{\n//                             error : response.ok,\n//                             description : data.msg\n//                         })\n//                     }\n//                     if(response.ok){\n//                         resolve(data);\n//                     }else if(throwErr == true && !response.ok){\n//                         reject(data);\n//                     }\n//                 })\n                \n//             })\n//             .catch((err)=>{\n//                 console.log(err);\n//             })\n//         })\n//     }\n//     static post(endpoint,payload,emit,throwError){\n//         return new Promise((resolve,reject)=>{\n//             fetch(this.BASE_URL+endpoint,{\n//                 method: \"POST\",\n//                 credentials: \"include\", \n//                 headers: {\n//                     \"Content-Type\": \"application/json\",\n//                 },\n//                 body : JSON.stringify({ \n//                     ...payload\n//                   })\n//             })\n//             .then((response)=>{\n//                 console.log(response.headers)\n//                 response.json()\n//                 .then((data)=>{\n//                     if(response.status == 401){\n//                         toolKit.router.push('/login')\n//                     }\n//                     if(response.ok){\n//                         resolve(data);\n//                     }else{\n//                         if(throwError){\n//                             reject(data);\n//                         }\n//                     }\n//                     if(emit){\n//                         toolKit.emitter.emit(\"sidebar-error\",{\n//                             error : !response.ok,\n//                             description : data.msg\n//                         })\n//                     }\n//                 })\n                \n//             })\n//             .catch((err)=>{\n//                 console.log(err)\n//             })\n//         })\n\n//     }\n//     static update(endpoint,payload,emit,throwError){\n//         return new Promise((resolve,reject)=>{\n//             fetch(this.BASE_URL+endpoint,{\n//                 method: \"PUT\",\n//                 credentials: \"include\", \n//                 headers: {\n//                     \"Content-Type\": \"application/json\",\n//                 },\n//                 body : JSON.stringify({ \n//                     ...payload\n//                   })\n//             })\n//             .then((response)=>{\n//                 response.json()\n//                 .then((data)=>{\n//                     if(response.status == 401){\n//                         toolKit.router.push('/login')\n//                     }\n//                     if(response.ok){\n//                         resolve(data);\n//                     }else{\n//                         if(throwError){\n//                             reject(data);\n//                         }\n//                     }\n//                     if(emit){\n//                         toolKit.emitter.emit(\"sidebar-error\",{\n//                             error : !response.ok,\n//                             description : data.msg\n//                         })\n//                     }\n//                 })\n                \n//             })\n//             .catch((err)=>{\n//                 console.log(err)\n//             })\n//         })\n\n//     }\n//     static delete(endpoint,payload,emit,throwError){\n//         return new Promise((resolve,reject)=>{\n//             fetch(this.BASE_URL+endpoint,{\n//                 method: \"DELETE\",\n//                 credentials: \"include\", \n//                 headers: {\n//                     \"Content-Type\": \"application/json\",\n//                 },\n//                 body : JSON.stringify({ \n//                     ...payload\n//                   })\n//             })\n//             .then((response)=>{\n//                 response.json()\n//                 .then((data)=>{\n//                     if(response.status == 401){\n//                         toolKit.router.push('/login')\n//                     }\n//                     if(response.ok){\n//                         resolve(data);\n//                     }else{\n//                         if(throwError){\n//                             reject(data);\n//                         }\n//                     }\n//                     if(emit){\n//                         toolKit.emitter.emit(\"sidebar-error\",{\n//                             error : !response.ok,\n//                             description : data.msg\n//                         })\n//                     }\n//                 })\n                \n//             })\n//             .catch((err)=>{\n//                 console.log(err)\n//             })\n//         })\n\n//     }\n// }\n\n\n\n// toolKit.router.beforeEach((to) => {\n//     if(to == \"supervision\" && toolKit.router.query.UAT == null && toolKit.router.query.Prod == null){\n//         toolKit.router.query.UAT = true;\n//     }\n//     return false\n//   })"],"mappings":"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,CAAC;UACjC;UACA,IAAGL,QAAQ,CAACU,EAAE,EAAC;YACXlB,OAAO,CAACe,IAAI,CAAC;UACjB,CAAC,MAAI;YACD,IAAGU,UAAU,EAAC;cACVxB,MAAM,CAACc,IAAI,CAAC;YAChB;UACJ;UACA,IAAGlB,IAAI,EAAC;YACJL,OAAO,CAACwB,OAAO,CAACnB,IAAI,CAAC,eAAe,EAAC;cACjCoB,KAAK,EAAG,CAACT,QAAQ,CAACU,EAAE;cACpBC,WAAW,EAAGJ,IAAI,CAACK;YACvB,CAAC,CAAC;UACN;QACJ,CAAC,CAAC;MAEN,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAG;QACVb,OAAO,CAACC,GAAG,CAACY,GAAG,CAAC;MACpB,CAAC,CAAC;IACN,CAAC,CAAC;EAEN;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAAAW,eAAA,CA/UqBvC,QAAQ,cACP,8BAA8B"},"metadata":{},"sourceType":"module","externalDependencies":[]}