{"ast":null,"code":"import apiFetch from \"@/common/api.service.js\";\nimport { UseAuthStore } from \"@/store/store.js\";\nimport lineComponent from \"@/components/incident-execute/step-lines.vue\";\nimport buttonValidation from \"@/components/interraction/buttons/validation-button.vue\";\nexport default {\n  name: 'incident-execute',\n  data() {\n    return {\n      AuthStore: UseAuthStore(),\n      incident: {},\n      openBooleans: {},\n      notWaitingForOutPut: true\n    };\n  },\n  methods: {\n    lookForGlobalInput(input) {\n      let res = this.incident.inputs.find(item => item.id == input.idParent);\n      input.value = res.value;\n      return res;\n    }\n  },\n  components: {\n    lineComponent,\n    buttonValidation\n  },\n  beforeMount() {\n    let endpoint = \"/incident/\" + this.$route.params.id;\n    apiFetch.get(endpoint, true, false).then(incident => {\n      this.incident = incident;\n    });\n  }\n};","map":{"version":3,"names":["apiFetch","UseAuthStore","lineComponent","buttonValidation","name","data","AuthStore","incident","openBooleans","notWaitingForOutPut","methods","lookForGlobalInput","input","res","inputs","find","item","id","idParent","value","components","beforeMount","endpoint","$route","params","get","then"],"sources":["/Users/abdelmadjidbelhanafi/Documents/vsc project/Natixis/new-banxy-rest-api/frontend/src/views/incidents/execute.vue"],"sourcesContent":["<template>\n    <div class=\"holders execution-holder\">\n        <div class=\"header colorfull-gradient-1\">\n            Executing incident\n        </div>\n        <div\n            style=\"box-sizing:border-box; padding: 10px; background-color:rgb(240, 240, 240); border-radius: 10px; display:grid;grid-template-rows:auto; gap:10px;\">\n            <p>\n                <strong>Global inputs </strong>\n            </p>\n            <div class=\"input-holders\"\n                style=\"padding:0px;display: flex;flex-direction: row;justify-content: flex-start;align-items :center; gap:5px;\"\n                v-for=\"npt,index in incident.inputs\" :key=\"index\">\n                <label>{{ npt.label }}</label>\n                <input :placeholder=\"npt.label\" :type=\"npt.type\" v-model=\"npt.value\" required>\n            </div>\n        </div>\n        <div class=\"steps\">\n            <lineComponent v-for=\"step in incident.steps\" :key=\"step.id\">\n\n                <template #Header>{{'Step '+step.order + \": \" +step.name }}</template>\n                <template #content>\n                    <form>\n                        <div class=\"step-left-side\">\n                            <div class=\"step-inputs\">\n                                <div v-for=\"input in step.inputs\" :key=\"input.id\" class=\"input-holder\"\n                                    style=\" background-color: white; display: flex;flex-direction: column;justify-content: flex-start;align-items :flex-start; gap:5px;box-sizing: border-box;\">\n                                    <label for=\"type\" >{{ input.label }}: </label>\n\n                                    <input v-if=\"!input.fromIncident\"  style=\"width: 100%;\" :placeholder=\"input.label\" :type=\"input.type\" v-model=\"input.value\" required >\n                                    <input v-else   :placeholder=\"input.label\" style=\"width: 100%;\" :type=\"input.type\" v-model=\"lookForGlobalInput(input).value\"  disabled >\n                                </div>\n                                <div v-for=\"input in step.inputs\" :key=\"input.id\" class=\"input-holder\"\n                                    style=\" background-color: white; display: flex;flex-direction: column;justify-content: flex-start;align-items :flex-start; gap:5px;box-sizing: border-box;\">\n                                    <label for=\"type\" >{{ input.label }}: </label>\n\n                                    <input v-if=\"!input.fromIncident\"  style=\"width: 100%;\" :placeholder=\"input.label\" :type=\"input.type\" v-model=\"input.value\" required >\n                                    <input v-else   :placeholder=\"input.label\" style=\"width: 100%;\" :type=\"input.type\" v-model=\"lookForGlobalInput(input).value\"  disabled >\n                                </div>\n                                <div v-for=\"input in step.inputs\" :key=\"input.id\" class=\"input-holder\"\n                                    style=\" background-color: white; display: flex;flex-direction: column;justify-content: flex-start;align-items :flex-start; gap:5px;box-sizing: border-box;\">\n                                    <label for=\"type\" >{{ input.label }}: </label>\n\n                                    <input v-if=\"!input.fromIncident\"  style=\"width: 100%;\" :placeholder=\"input.label\" :type=\"input.type\" v-model=\"input.value\" required >\n                                    <input v-else   :placeholder=\"input.label\" style=\"width: 100%;\" :type=\"input.type\" v-model=\"lookForGlobalInput(input).value\"  disabled >\n                                </div>\n                                <div v-for=\"input in step.inputs\" :key=\"input.id\" class=\"input-holder\"\n                                    style=\" background-color: white; display: flex;flex-direction: column;justify-content: flex-start;align-items :flex-start; gap:5px;box-sizing: border-box;\">\n                                    <label for=\"type\" >{{ input.label }}: </label>\n\n                                    <input v-if=\"!input.fromIncident\"  style=\"width: 100%;\" :placeholder=\"input.label\" :type=\"input.type\" v-model=\"input.value\" required >\n                                    <input v-else   :placeholder=\"input.label\" style=\"width: 100%;\" :type=\"input.type\" v-model=\"lookForGlobalInput(input).value\"  disabled >\n                                </div>\n                                <div v-for=\"input in step.inputs\" :key=\"input.id\" class=\"input-holder\"\n                                    style=\" background-color: white; display: flex;flex-direction: column;justify-content: flex-start;align-items :flex-start; gap:5px;box-sizing: border-box;\">\n                                    <label for=\"type\" >{{ input.label }}: </label>\n\n                                    <input v-if=\"!input.fromIncident\"  style=\"width: 100%;\" :placeholder=\"input.label\" :type=\"input.type\" v-model=\"input.value\" required >\n                                    <input v-else   :placeholder=\"input.label\" style=\"width: 100%;\" :type=\"input.type\" v-model=\"lookForGlobalInput(input).value\"  disabled >\n                                </div>\n                            </div>\n                            <div class=\"step-footer colorfull-gradient-1\">\n                                <p>\n                                    Executing <strong>{{\" \"+ step.script.name + ' ' }}</strong> on {{ (step.onServer ==\n                                    true ? step.server.name : step.container.name + ' container of ' + step.server.name\n                                    ) }}\n                                </p>\n                                <div class=\"shell-buttons\">\n                                    <buttonValidation style=\"width: 100%;padding:0;\" :warning=\"true\" :type=\"'Submit'\">\n                                        <template #textButton>\n                                            Reset\n                                        </template>\n                                    </buttonValidation>\n                                    <buttonValidation style=\"width: 100%;padding:0;\" :ok=\"true\" :type=\"'Submit'\">\n                                        <template #textButton>\n                                            Execute\n                                        </template>\n                                    </buttonValidation>\n\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"step-shell\" style=\"background-color: black;\"></div>\n                    </form>\n                </template>\n\n            </lineComponent>\n        </div>\n    </div>\n</template>\n\n<script>\nimport apiFetch from \"@/common/api.service.js\"\nimport { UseAuthStore } from \"@/store/store.js\"\n\nimport lineComponent from \"@/components/incident-execute/step-lines.vue\"\nimport buttonValidation from \"@/components/interraction/buttons/validation-button.vue\"\n\nexport default{\n    name : 'incident-execute',\n    data(){\n        return {\n            AuthStore : UseAuthStore(),\n            incident: {\n\n            },\n            openBooleans : {},\n            notWaitingForOutPut : true,\n        }\n    },\n    methods : {\n        lookForGlobalInput(input){\n            let res = this.incident.inputs.find(item => item.id == input.idParent);\n            input.value = res.value;\n            return res;\n        },\n    },\n    components : {\n        lineComponent,\n        buttonValidation\n    },\n    beforeMount(){\n        let endpoint = \"/incident/\"+ this.$route.params.id ;\n        apiFetch.get(endpoint,true,false)\n        .then((incident)=>{\n            this.incident = incident;\n        })\n    }\n}\n</script>\n<style scoped>\n.execution-holder{\n    width: 100%;\n\n    display: grid;\n    grid-template-rows: auto auto 1fr;\n\n    \n    height: 100vh;\n    width: 100%;\n\n    padding: var(--small-padding);\n    box-sizing: border-box;\n\n    overflow-y: auto;\n\n\n}\n.execution-holder .header{\n    padding: 10px;\n    box-sizing: border-box;\n\n    font-size: 24px;\n    font-weight: 700;\n\n    color :white;\n}\n.execution-holder .steps{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: flex-start;\n\n    gap: 5px;\n\n    overflow-y: auto;\n\n    max-height: 100%;\n\n\n}\n\n.execution-holder .steps::-webkit-scrollbar {\n  width: 4px; /* Width of the scrollbar */\n}\n\n/* Handle portion of the scrollbar */\n.execution-holder .steps::-webkit-scrollbar-thumb {\n  background-color: #999; /* Color of the thumb */\n  border-radius: 4px; /* Border radius of the thumb */\n}\n\n/* Track (background) of the scrollbar */\n.execution-holder .steps::-webkit-scrollbar-track {\n  background-color: #f0f0f0; /* Color of the track */\n}\n\n.content form{\n    height: 100%;\n    width: 100%;\n\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 1fr auto;\n\n}\n.step-left-side{\n    grid-area: 1/1/2/2;\n\n    height: 100%;\n    width: 100%;\n\n    max-height: 100%;\n\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: flex-start;\n\n    padding: var(--extra-small-padding);\n    box-sizing: border-box;\n}\n.step-shell{\n    grid-area: 1/2/3/3;\n}\n.step-footer{\n    height: 70px;\n    width: 100%;\n\n    color: var(--white-text-color );\n    padding: var(--extra-small-padding);\n    box-sizing: border-box;\n\n    border-radius: var(--extra-small-border-radius);\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: space-between;\n\n    font-size: 14px;\n    text-align: left;\n\n    gap: 5px;\n}\n.step-footer .shell-buttons{\n    width: 100%;\n    \n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n\n    gap: 5px;\n}\n\n.step-inputs{\n\n    height: 100%;\n    width: 100%;\n\n    max-height: 100%;\n    overflow-y: auto;\n}\n\n\n@media only screen and (max-width: 1000px) {\n\n.execution-holder{\n    height: calc(100vh - var(--navbar-thin-height));\n}\n\n}\n\n\n\n\n</style>"],"mappings":"AA4FA,OAAOA,QAAO,MAAO,yBAAwB;AAC7C,SAASC,YAAW,QAAS,kBAAiB;AAE9C,OAAOC,aAAY,MAAO,8CAA6C;AACvE,OAAOC,gBAAe,MAAO,yDAAwD;AAErF,eAAc;EACVC,IAAG,EAAI,kBAAkB;EACzBC,IAAIA,CAAA,EAAE;IACF,OAAO;MACHC,SAAQ,EAAIL,YAAY,CAAC,CAAC;MAC1BM,QAAQ,EAAE,CAEV,CAAC;MACDC,YAAW,EAAI,CAAC,CAAC;MACjBC,mBAAkB,EAAI;IAC1B;EACJ,CAAC;EACDC,OAAM,EAAI;IACNC,kBAAkBA,CAACC,KAAK,EAAC;MACrB,IAAIC,GAAE,GAAI,IAAI,CAACN,QAAQ,CAACO,MAAM,CAACC,IAAI,CAACC,IAAG,IAAKA,IAAI,CAACC,EAAC,IAAKL,KAAK,CAACM,QAAQ,CAAC;MACtEN,KAAK,CAACO,KAAI,GAAIN,GAAG,CAACM,KAAK;MACvB,OAAON,GAAG;IACd;EACJ,CAAC;EACDO,UAAS,EAAI;IACTlB,aAAa;IACbC;EACJ,CAAC;EACDkB,WAAWA,CAAA,EAAE;IACT,IAAIC,QAAO,GAAI,YAAY,GAAE,IAAI,CAACC,MAAM,CAACC,MAAM,CAACP,EAAC;IACjDjB,QAAQ,CAACyB,GAAG,CAACH,QAAQ,EAAC,IAAI,EAAC,KAAK,EAC/BI,IAAI,CAAEnB,QAAQ,IAAG;MACd,IAAI,CAACA,QAAO,GAAIA,QAAQ;IAC5B,CAAC;EACL;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}