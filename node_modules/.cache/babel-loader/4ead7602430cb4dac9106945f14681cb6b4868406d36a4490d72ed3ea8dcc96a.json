{"ast":null,"code":"import apiFetch from \"@/common/api.service.js\";\nimport lineComponent from \"@/components/incident-execute/step-lines.vue\";\nexport default {\n  name: 'incident-execute',\n  data() {\n    return {\n      incident: {}\n    };\n  },\n  methods: {\n    onLoadStep() {}\n  },\n  components: {\n    lineComponent\n  },\n  beforeMount() {\n    let endpoint = \"/incident/\" + this.$route.params.id;\n    apiFetch.get(endpoint, true, false).then(incident => {\n      this.incident = incident;\n    });\n  }\n};","map":{"version":3,"names":["apiFetch","lineComponent","name","data","incident","methods","onLoadStep","components","beforeMount","endpoint","$route","params","id","get","then"],"sources":["/Users/abdelmadjidbelhanafi/Documents/vsc project/Natixis/new-banxy-rest-api/frontend/src/views/incidents/execute.vue"],"sourcesContent":["<template>\n    <div class=\"holders execution-holder\">\n        <div class=\"header colorfull-gradient-1\">\n            Executing incident\n        </div>\n        <div\n            style=\"box-sizing:border-box; padding: 10px; background-color:rgb(240, 240, 240); border-radius: 10px; display:grid;grid-template-rows:auto; gap:10px;\">\n            <p>\n                <strong>Global inputs </strong>\n            </p>\n            <div class=\"input-holders\"\n                style=\"padding:0px;display: flex;flex-direction: row;justify-content: flex-start;align-items :center; gap:5px;\"\n                v-for=\"npt,index in incident.inputs\" :key=\"index\">\n                <label>{{ npt.label }}</label>\n                <input :placeholder=\"npt.label\" :type=\"npt.type\" v-model=\"npt.value\" required>\n            </div>\n        </div>\n        <div class=\"steps\">\n            <lineComponent v-for=\"step in incident.steps\" :key=\"step.id\" @load-step=\"onLoadStep\" :open=\"openBooleans[step.id]\" :id=\"step.id\">\n                <template v-slot:title>Step {{ ' ' + step.order + ': ' }} {{ step.name }}</template>\n                <template v-slot:content>\n                    <div class=\"interaction\">\n                        <form @submit.prevent=\"ExecuteStep(step)\">\n                            <div class=\"inputs\">\n                                <inputPrimary v-for=\"npt, index in step.inputs\" :key=\"index\">\n                                    <label>{{ npt.label }}</label>\n                                    <input v-if=\"!npt.fromIncident\" :placeholder=\"npt.label\" :type=\"npt.type\"\n                                        v-model=\"npt.value\" required>\n                                    <input v-else :placeholder=\"npt.label\" :type=\"npt.type\"\n                                        v-model=\"lookForGlobalInput(npt).value\" disabled>\n                                </inputPrimary>\n\n                            </div>\n                            <div class=\"parameters\">\n                                <p style=\"color:rgb(241, 241, 241); \">\n                                    <span>Executing </span>\n                                    <span>\n                                        <strong>{{ step.script.name }}</strong>\n                                        <p> with </p>\n                                        <strong>{{ step.command }}</strong>\n                                    </span>\n                                    <span>, on </span>\n                                    <span v-if=\"step.container != null\">\n                                        <strong>\n                                            {{ step.container.name }}\n                                        </strong>\n                                        container of\n                                    </span>\n                                    <span><strong>{{ step.server.name }}</strong></span>\n                                </p>\n                                <div class=\"action\">\n                                    <button class=\"secondary-btn\">Reset</button>\n                                    <div style=\"display: flex;position : relative;border-radius: 5px;overflow: hidden;\">\n                                        <div v-if=\"!notWaitingForOutPut\"\n                                            style=\"position : absolute;width:100%;height:100%;top:0;left:0;opacity: 0.65; background-color: rgb(221, 221, 221);\">\n\n                                        </div>\n                                        <primaryButton>Execute</primaryButton>\n                                    </div>\n                                </div>\n                            </div>\n                        </form>\n                        <shell @execute-step=\"ExecuteStep\" @clear-lines=\"onClearLines\" @push-new-line=\"onPushNewLine\"\n                            :id=\"step.id\" :shellBlockLines=\"step.shell\" :user=\"AuthStore.userLogged.username\"\n                            :ip=\"step.server.ip\" :notWaitingForOutPut=\"notWaitingForOutPut\">\n                        </shell>\n                    </div>\n                </template>\n            </lineComponent>\n        </div>\n    </div>\n</template>\n\n<script>\nimport apiFetch from \"@/common/api.service.js\"\n\nimport lineComponent from \"@/components/incident-execute/step-lines.vue\"\n\nexport default{\n    name : 'incident-execute',\n    data(){\n        return {\n            incident: {\n\n            }\n        }\n    },\n    methods : {\n        onLoadStep(){\n\n        }\n    },\n    components : {\n        lineComponent\n    },\n    beforeMount(){\n        let endpoint = \"/incident/\"+ this.$route.params.id ;\n        apiFetch.get(endpoint,true,false)\n        .then((incident)=>{\n            this.incident = incident;\n        })\n    }\n}\n</script>\n<style scoped>\n.execution-holder{\n    width: 100%;\n    height: 100%;\n\n    display: grid;\n    grid-template-rows: auto auto 1fr;\n}\n.execution-holder .header{\n    padding: 10px;\n    box-sizing: border-box;\n\n    font-size: 24px;\n    font-weight: 700;\n\n    color :white;\n}\n.execution-holder .steps{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: flex-start;\n\n    gap: 5px;\n\n    overflow-y: auto;\n}\n</style>"],"mappings":"AA0EA,OAAOA,QAAO,MAAO,yBAAwB;AAE7C,OAAOC,aAAY,MAAO,8CAA6C;AAEvE,eAAc;EACVC,IAAG,EAAI,kBAAkB;EACzBC,IAAIA,CAAA,EAAE;IACF,OAAO;MACHC,QAAQ,EAAE,CAEV;IACJ;EACJ,CAAC;EACDC,OAAM,EAAI;IACNC,UAAUA,CAAA,EAAE,CAEZ;EACJ,CAAC;EACDC,UAAS,EAAI;IACTN;EACJ,CAAC;EACDO,WAAWA,CAAA,EAAE;IACT,IAAIC,QAAO,GAAI,YAAY,GAAE,IAAI,CAACC,MAAM,CAACC,MAAM,CAACC,EAAC;IACjDZ,QAAQ,CAACa,GAAG,CAACJ,QAAQ,EAAC,IAAI,EAAC,KAAK,EAC/BK,IAAI,CAAEV,QAAQ,IAAG;MACd,IAAI,CAACA,QAAO,GAAIA,QAAQ;IAC5B,CAAC;EACL;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}