{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport apiFetch from \"@/common/api.service.js\";\nimport { UseAuthStore } from \"@/store/store.js\";\nimport lineComponent from \"@/components/incident-execute/step-lines.vue\";\nimport buttonValidation from \"@/components/interraction/buttons/validation-button.vue\";\nimport lineShell from \"@/components/incident-execute/shellline.vue\";\nexport default {\n  name: 'incident-execute',\n  data() {\n    return {\n      AuthStore: UseAuthStore(),\n      incident: {},\n      openBooleans: {},\n      notWaitingForOutPut: true\n    };\n  },\n  methods: {\n    lookForGlobalInput(input) {\n      let res = this.incident.inputs.find(item => item.id == input.idParent);\n      input.value = res.value;\n      return res;\n    },\n    fillShell(cmd, step) {\n      step.shell.push({\n        command: cmd,\n        result: [{\n          value: 'this is test',\n          type: 'warning'\n        }, {\n          value: 'this is test',\n          type: 'error'\n        }, {\n          value: 'this is test',\n          type: 'correct'\n        }]\n      });\n      switch (cmd) {\n        case 'clear':\n          step.shell = [{\n            command: 'clear'\n          }];\n          break;\n        default:\n          break;\n      }\n    },\n    async executeStep(step) {\n      let endpoint = '/incident/step/execute';\n      await apiFetch.post(endpoint, {\n        id: step.id,\n        inputs: step.inputs\n      }, true, false).then(res => {\n        if (res.error) {\n          for (let line in res.error) {\n            step.shell.push({\n              value: line,\n              type: 'error'\n            });\n          }\n        }\n        if (res.result) {\n          for (let line in res.result) {\n            step.shell.push({\n              value: line,\n              type: 'error'\n            });\n          }\n        }\n      });\n    }\n  },\n  components: {\n    lineComponent,\n    buttonValidation,\n    lineShell\n  },\n  beforeMount() {\n    let endpoint = \"/incident/\" + this.$route.params.id;\n    apiFetch.get(endpoint, true, false).then(incident => {\n      this.incident = incident;\n      for (let step of this.incident.steps) {\n        step.shell = [];\n      }\n      console.log(this.incident.steps);\n    });\n  }\n};","map":{"version":3,"names":["apiFetch","UseAuthStore","lineComponent","buttonValidation","lineShell","name","data","AuthStore","incident","openBooleans","notWaitingForOutPut","methods","lookForGlobalInput","input","res","inputs","find","item","id","idParent","value","fillShell","cmd","step","shell","push","command","result","type","executeStep","endpoint","post","then","error","line","components","beforeMount","$route","params","get","steps","console","log"],"sources":["/Users/abdelmadjidbelhanafi/Documents/vsc project/Natixis/new-banxy-rest-api/frontend/src/views/incidents/execute.vue"],"sourcesContent":["<template>\n    <div class=\"holders execution-holder\">\n        <div class=\"header colorfull-gradient-1\">\n            Executing incident\n        </div>\n        <div\n            style=\"box-sizing:border-box; padding: 10px; background-color:rgb(240, 240, 240); border-radius: 10px; display:grid;grid-template-rows:auto; gap:10px;\">\n            <p>\n                <strong>Global inputs </strong>\n            </p>\n            <div class=\"input-holders\"\n                style=\"padding:0px;display: flex;flex-direction: row;justify-content: flex-start;align-items :center; gap:5px;\"\n                v-for=\"npt,index in incident.inputs\" :key=\"index\">\n                <label>{{ npt.label }}</label>\n                <input :placeholder=\"npt.label\" :type=\"npt.type\" v-model=\"npt.value\" required>\n            </div>\n        </div>\n        <div class=\"steps\">\n            <lineComponent v-for=\"step in incident.steps\" :key=\"step.id\">\n\n                <template #Header>{{'Step '+step.order + \": \" +step.name }}</template>\n                <template #content>\n                    <form @submit.prevent=\"\" >\n                        <div class=\"step-left-side\">\n                            <div class=\"step-inputs\">\n                                <div v-for=\"input in step.inputs\" :key=\"input.id\" class=\"input-holder\"\n                                    style=\" background-color: white; display: flex;flex-direction: column;justify-content: flex-start;align-items :flex-start; gap:5px;box-sizing: border-box;\">\n                                    <label for=\"type\" >{{ input.label }}: </label>\n\n                                    <input v-if=\"!input.fromIncident\"   style=\"width: 100%;\" :placeholder=\"input.label\" :type=\"input.type\" v-model=\"input.value\" required >\n                                    <input v-else  :required=\"true\"  :placeholder=\"input.label\" style=\"width: 100%;\" :type=\"input.type\" v-model=\"lookForGlobalInput(input).value\"  disabled >\n                                </div>\n\n                            </div>\n                            <div class=\"step-footer colorfull-gradient-1\">\n                                <p>\n                                    Executing <strong>{{\" \"+ step.script.name + ' ' }}</strong> on {{ (step.onServer ==\n                                    true ? step.server.name : step.container.name + ' container of ' + step.server.name\n                                    ) }}\n                                </p>\n                                <div class=\"shell-buttons\">\n                                    <buttonValidation style=\"width: 100%;padding:0;\" :warning=\"true\" :type=\"'Reset'\">\n                                        <template #textButton>\n                                            Reset\n                                        </template>\n                                    </buttonValidation>\n                                    <buttonValidation @click=\"executeStep(step)\" style=\"width: 100%;padding:0;\" :ok=\"true\" :type=\"'Submit'\">\n                                        <template #textButton>\n                                            Execute\n                                        </template>\n                                    </buttonValidation>\n\n                                </div>\n                            </div>\n                        </div>\n                    </form>\n                    <div class=\"step-shell\" style=\"background-color: black;\">\n                            <lineShell \n                            v-for=\"line,index in step.shell\" :key=\"index\"\n                            :last=\"false\"\n                            :username=\"AuthStore.getUsername\"\n                            :server=\"step.server.name\"\n                            :command=\"line.command\"\n                            :result=\"line.result\"\n                            :notWaitingForOutPut=\"notWaitingForOutPut\"\n                            > </lineShell>\n                            \n                            <lineShell \n                            :last=\"true\"\n                            :username=\"AuthStore.getUsername\"\n                            :server=\"step.server.name\"\n                            :notWaitingForOutPut=\"notWaitingForOutPut\"\n                            :validCommands=\"['clear']\"\n                            @fill-shell=\"(cmd)=>{fillShell(cmd,step)}\"\n                            > </lineShell>\n                    </div>\n                </template>\n\n            </lineComponent>\n        </div>\n    </div>\n</template>\n\n<script>\nimport apiFetch from \"@/common/api.service.js\"\nimport { UseAuthStore } from \"@/store/store.js\"\n\nimport lineComponent from \"@/components/incident-execute/step-lines.vue\"\nimport buttonValidation from \"@/components/interraction/buttons/validation-button.vue\"\nimport lineShell from \"@/components/incident-execute/shellline.vue\"\n\nexport default{\n    name : 'incident-execute',\n    data(){\n        return {\n            AuthStore : UseAuthStore(),\n            incident: {\n\n            },\n            openBooleans : {},\n            notWaitingForOutPut : true,\n        }\n    },\n    methods : {\n        lookForGlobalInput(input){\n            let res = this.incident.inputs.find(item => item.id == input.idParent);\n            input.value = res.value;\n            return res;\n        },\n        fillShell(cmd,step){\n            step.shell.push({\n                command : cmd,\n                result : [\n                {\n                    value : 'this is test',\n                    type : 'warning'\n                },\n                {\n                    value : 'this is test',\n                    type : 'error'\n                },\n                {\n                    value : 'this is test',\n                    type : 'correct'\n                },\n                ]\n            })\n\n            switch (cmd) {\n                case 'clear':\n                    step.shell = [{command : 'clear'}]\n                    break;\n            \n                default:\n                    break;\n            }\n        },\n        async executeStep(step){\n            let endpoint = '/incident/step/execute'\n            await apiFetch.post(endpoint,{\n                id : step.id,\n                inputs : step.inputs,\n            },true,false)\n            .then((res)=>{\n                if(res.error){\n                    for(let line in res.error){\n                        step.shell.push({\n                            value : line,\n                            type : 'error'\n                        })\n\n                    }\n                }\n                if(res.result){\n                    for(let line in res.result){\n                        step.shell.push({\n                            value : line,\n                            type : 'error'\n                        })\n\n                    }\n                }\n            })\n\n        }\n    },\n    components : {\n        lineComponent,\n        buttonValidation,\n        lineShell\n    },\n    beforeMount(){\n        let endpoint = \"/incident/\"+ this.$route.params.id ;\n        apiFetch.get(endpoint,true,false)\n        .then((incident)=>{\n            this.incident = incident;\n            for(let step of this.incident.steps){\n                step.shell = [];\n            }\n            console.log(this.incident.steps)\n        })\n    }\n}\n</script>\n<style scoped>\n.execution-holder{\n    width: 100%;\n\n    display: grid;\n    grid-template-rows: auto auto 1fr;\n\n    \n    height: 100vh;\n    width: 100%;\n\n    padding: var(--small-padding);\n    box-sizing: border-box;\n\n    overflow-y: auto;\n\n\n}\n.execution-holder .header{\n    padding: 10px;\n    box-sizing: border-box;\n\n    font-size: 24px;\n    font-weight: 700;\n\n    color :white;\n}\n.execution-holder .steps{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: flex-start;\n\n    gap: 5px;\n\n    overflow-y: auto;\n\n    max-height: 100%;\n\n\n}\n\n.execution-holder .steps::-webkit-scrollbar {\n  width: 4px; /* Width of the scrollbar */\n}\n\n/* Handle portion of the scrollbar */\n.execution-holder .steps::-webkit-scrollbar-thumb {\n  background-color: #999; /* Color of the thumb */\n  border-radius: 4px; /* Border radius of the thumb */\n}\n\n/* Track (background) of the scrollbar */\n.execution-holder .steps::-webkit-scrollbar-track {\n  background-color: #f0f0f0; /* Color of the track */\n}\n\n.content form{\n    height: 100%;\n    width: 100%;\n\n    display: grid;\n    grid-template-columns: 1fr ;\n\n    padding: var(--extra-small-padding);\n    gap:var(--extra-small-padding);\n    box-sizing: border-box;\n\n}\n.step-left-side{\n\n    height: 100%;\n    width: 100%;\n\n    max-height: 100%;\n\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-between;\n\n}\n.step-shell{\n    height: 100%;\n    width: 100%;\n    max-width: 100%;\n    overflow-x: auto;\n\n    border-radius: var(--extra-small-border-radius);\n\n    padding: var(--extra-small-padding);\n    box-sizing: border-box;\n}\n.step-shell::-webkit-scrollbar {\n  width: 4px; /* Width of the scrollbar */\n}\n\n/* Handle portion of the scrollbar */\n.step-shell::-webkit-scrollbar-thumb {\n  background-color: #999; /* Color of the thumb */\n  border-radius: 4px; /* Border radius of the thumb */\n}\n\n/* Track (background) of the scrollbar */\n.step-shell::-webkit-scrollbar-track {\n  background-color: #f0f0f0; /* Color of the track */\n}\n.step-footer{\n    height: 70px;\n    width: 100%;\n\n    color: var(--white-text-color );\n    padding: var(--extra-small-padding);\n    box-sizing: border-box;\n\n    border-radius: var(--extra-small-border-radius);\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: space-between;\n\n    font-size: 14px;\n    text-align: left;\n\n    gap: 5px;\n\n    justify-self: flex-end;\n\n}\n.step-footer .shell-buttons{\n    width: 100%;\n    \n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n\n    gap: 5px;\n\n}\n\n.step-inputs{\n\n    font-size: 14px;\n\n    height: 100%;\n    width: 100%;\n\n    max-height: 100%;\n    overflow-y: auto;\n\n    box-sizing: border-box;\n}\n.step-inputs::-webkit-scrollbar {\n  width: 4px; /* Width of the scrollbar */\n}\n\n/* Handle portion of the scrollbar */\n.step-inputs::-webkit-scrollbar-thumb {\n  background-color: #999; /* Color of the thumb */\n  border-radius: 4px; /* Border radius of the thumb */\n}\n\n/* Track (background) of the scrollbar */\n.step-inputs::-webkit-scrollbar-track {\n  background-color: #f0f0f0; /* Color of the track */\n}\n\n\n@media only screen and (max-width: 1000px) {\n\n.execution-holder{\n    height: calc(100vh - var(--navbar-thin-height));\n}\n\n}\n\n\n\n\n</style>"],"mappings":";AAoFA,OAAOA,QAAO,MAAO,yBAAwB;AAC7C,SAASC,YAAW,QAAS,kBAAiB;AAE9C,OAAOC,aAAY,MAAO,8CAA6C;AACvE,OAAOC,gBAAe,MAAO,yDAAwD;AACrF,OAAOC,SAAQ,MAAO,6CAA4C;AAElE,eAAc;EACVC,IAAG,EAAI,kBAAkB;EACzBC,IAAIA,CAAA,EAAE;IACF,OAAO;MACHC,SAAQ,EAAIN,YAAY,CAAC,CAAC;MAC1BO,QAAQ,EAAE,CAEV,CAAC;MACDC,YAAW,EAAI,CAAC,CAAC;MACjBC,mBAAkB,EAAI;IAC1B;EACJ,CAAC;EACDC,OAAM,EAAI;IACNC,kBAAkBA,CAACC,KAAK,EAAC;MACrB,IAAIC,GAAE,GAAI,IAAI,CAACN,QAAQ,CAACO,MAAM,CAACC,IAAI,CAACC,IAAG,IAAKA,IAAI,CAACC,EAAC,IAAKL,KAAK,CAACM,QAAQ,CAAC;MACtEN,KAAK,CAACO,KAAI,GAAIN,GAAG,CAACM,KAAK;MACvB,OAAON,GAAG;IACd,CAAC;IACDO,SAASA,CAACC,GAAG,EAACC,IAAI,EAAC;MACfA,IAAI,CAACC,KAAK,CAACC,IAAI,CAAC;QACZC,OAAM,EAAIJ,GAAG;QACbK,MAAK,EAAI,CACT;UACIP,KAAI,EAAI,cAAc;UACtBQ,IAAG,EAAI;QACX,CAAC,EACD;UACIR,KAAI,EAAI,cAAc;UACtBQ,IAAG,EAAI;QACX,CAAC,EACD;UACIR,KAAI,EAAI,cAAc;UACtBQ,IAAG,EAAI;QACX,CAAC;MAEL,CAAC;MAED,QAAQN,GAAG;QACP,KAAK,OAAO;UACRC,IAAI,CAACC,KAAI,GAAI,CAAC;YAACE,OAAM,EAAI;UAAO,CAAC;UACjC;QAEJ;UACI;MACR;IACJ,CAAC;IACD,MAAMG,WAAWA,CAACN,IAAI,EAAC;MACnB,IAAIO,QAAO,GAAI,wBAAuB;MACtC,MAAM9B,QAAQ,CAAC+B,IAAI,CAACD,QAAQ,EAAC;QACzBZ,EAAC,EAAIK,IAAI,CAACL,EAAE;QACZH,MAAK,EAAIQ,IAAI,CAACR;MAClB,CAAC,EAAC,IAAI,EAAC,KAAK,EACXiB,IAAI,CAAElB,GAAG,IAAG;QACT,IAAGA,GAAG,CAACmB,KAAK,EAAC;UACT,KAAI,IAAIC,IAAG,IAAKpB,GAAG,CAACmB,KAAK,EAAC;YACtBV,IAAI,CAACC,KAAK,CAACC,IAAI,CAAC;cACZL,KAAI,EAAIc,IAAI;cACZN,IAAG,EAAI;YACX,CAAC;UAEL;QACJ;QACA,IAAGd,GAAG,CAACa,MAAM,EAAC;UACV,KAAI,IAAIO,IAAG,IAAKpB,GAAG,CAACa,MAAM,EAAC;YACvBJ,IAAI,CAACC,KAAK,CAACC,IAAI,CAAC;cACZL,KAAI,EAAIc,IAAI;cACZN,IAAG,EAAI;YACX,CAAC;UAEL;QACJ;MACJ,CAAC;IAEL;EACJ,CAAC;EACDO,UAAS,EAAI;IACTjC,aAAa;IACbC,gBAAgB;IAChBC;EACJ,CAAC;EACDgC,WAAWA,CAAA,EAAE;IACT,IAAIN,QAAO,GAAI,YAAY,GAAE,IAAI,CAACO,MAAM,CAACC,MAAM,CAACpB,EAAC;IACjDlB,QAAQ,CAACuC,GAAG,CAACT,QAAQ,EAAC,IAAI,EAAC,KAAK,EAC/BE,IAAI,CAAExB,QAAQ,IAAG;MACd,IAAI,CAACA,QAAO,GAAIA,QAAQ;MACxB,KAAI,IAAIe,IAAG,IAAK,IAAI,CAACf,QAAQ,CAACgC,KAAK,EAAC;QAChCjB,IAAI,CAACC,KAAI,GAAI,EAAE;MACnB;MACAiB,OAAO,CAACC,GAAG,CAAC,IAAI,CAAClC,QAAQ,CAACgC,KAAK;IACnC,CAAC;EACL;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}