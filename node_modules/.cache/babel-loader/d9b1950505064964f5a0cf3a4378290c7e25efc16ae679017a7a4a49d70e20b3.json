{"ast":null,"code":"import { UseAuthStore } from \"@/store/store.js\";\nimport apiFetch from \"@/common/api.service.js\";\nimport popupDisplay from \"@/components/interraction/popups/popup-display.vue\";\nimport queryNavbar from \"@/components/interraction/query/query-navbar.vue\";\nimport tableExtension from \"@/components/interraction/tables/table-withextension.vue\";\nimport loadingBar from \"@/components/loadingAnimations/bar-loading.vue\";\nexport default {\n  name: 'supervision-view',\n  data() {\n    return {\n      AuthStore: UseAuthStore(),\n      servers: [],\n      fetchingForServers: true,\n      displayContainersOnPopUp: false,\n      containersPopUpDisplay: null\n    };\n  },\n  components: {\n    queryNavbar,\n    tableExtension,\n    popupDisplay,\n    loadingBar\n  },\n  methods: {\n    getServers(query_name) {\n      this.fetchingForServers = true;\n      let type = this.$route.query.UAT ? 'UAT' : 'Prod';\n      let endpoint = \"/\" + type + '/servers';\n      if (query_name != null) {\n        endpoint = endpoint + \"?name=\" + query_name;\n      }\n      apiFetch.get(endpoint, false).then(servers => {\n        this.servers = servers;\n        this.fetchingForServers = false;\n        this.emitter.emit(\"sidebar-errors\", {\n          error: true,\n          description: \"No server matching \" + query_name + \" was found.\"\n        });\n      });\n    },\n    onInputChanged(inputValue) {\n      this.getServersWithNameLike(inputValue);\n    },\n    getServersWithNameLike(NameLike) {\n      console.log(NameLike);\n      this.getServers(NameLike);\n    },\n    displayContainersOf(server) {\n      //api/server/<int:server>/containers\n      let endpoint = \"/server/\" + server.id + '/containers/status';\n      apiFetch.get(endpoint, false, true).then(containers => {\n        this.containersPopUpDisplay = containers;\n      }).catch(error => {\n        this.displayContainersOnPopUp = false;\n        this.containersPopUpDisplay = null;\n        this.emitter.emit(\"sidebar-error\", {\n          error: true,\n          description: error.error\n        });\n      });\n      this.displayContainersOnPopUp = true;\n    },\n    addHashToLocation(params) {\n      history.pushState({}, null, this.$route.path + '#' + encodeURIComponent(params));\n    }\n  },\n  beforeMount() {\n    this.getServers(null);\n  },\n  watch: {\n    async '$route.query'() {\n      this.servers = [];\n      await this.getServers(null);\n    }\n  }\n};","map":{"version":3,"names":["UseAuthStore","apiFetch","popupDisplay","queryNavbar","tableExtension","loadingBar","name","data","AuthStore","servers","fetchingForServers","displayContainersOnPopUp","containersPopUpDisplay","components","methods","getServers","query_name","type","$route","query","UAT","endpoint","get","then","emitter","emit","error","description","onInputChanged","inputValue","getServersWithNameLike","NameLike","console","log","displayContainersOf","server","id","containers","catch","addHashToLocation","params","history","pushState","path","encodeURIComponent","beforeMount","watch","$route.query"],"sources":["/Users/abdelmadjidbelhanafi/Documents/vsc project/Natixis/new-banxy-rest-api/frontend/src/views/supervision.vue"],"sourcesContent":["/* -------------------------------------------------------------------------- */\n/*                                  JSON DATA                                 */\n/* -------------------------------------------------------------------------- */\n/*  \n\nservers : Array\n[\n{\n    id : X , name : \"test\" , ip : \"@ip\" , status : \"Active/Down\" , containers : [{ id : \"\" , name : \"\" , ports : '',status : '' }]\n}\n]\n\n/* -------------------------------------------------------------------------- */\n/*                                    TO DO                                   */\n/* -------------------------------------------------------------------------- */\n\nMethods : (getServers) , getServersWithNameLike\n\n*/\n<template>\n  <div class=\"holders hoder-supervision\">\n    <div class=\"Welcomeback colorfull-gradient-1\">\n      <h1>Welcome back, {{AuthStore.username}}!ðŸ‘‹</h1>\n      <p>How things are going today?</p>\n    </div>\n    <queryNavbar @input-changed=\"onInputChanged\" :theme=\"'white'\">\n      <template #Title>\n        Servers {{ \" \"+ (this.$route.query.UAT ? \"UAT\" : \"Prod\" ) }}\n      </template>\n    </queryNavbar>\n    <tableExtension>\n      <template #tableHeaders>\n        <td>Name</td>\n        <td>IP</td>\n        <td>Status</td>\n      </template>\n      <template #tableRows>\n        <tr  v-for=\"server in servers\" :key=\"server.id\" @click=\"displayContainersOf(server)\">\n          <td class=\"server-name\">{{ server.name }}</td>\n          <td>\n            <p>{{ server.ip }}</p>\n          </td>\n          <td>\n            <p class=\"holder-status\">\n              <span\n                :class=\"{ 'status-dot-active' : server.status == 'Active','status-dot-down' : server.status == 'Down'  }\"\n                class=\"status-dot\"></span>\n              <span>{{ server.status }}</span>\n            </p>\n          </td>\n        </tr>\n     \n        \n      </template>\n      <template #tableLoadingAnimation >\n        <loadingBar style=\"width: 100%;\" v-if=\"fetchingForServers == true\" ></loadingBar>\n      </template>\n\n    </tableExtension>\n\n    <popupDisplay style=\"width: 100%;height: 100%;\"  v-if=\"displayContainersOnPopUp == true\"\n      @close-popup=\"displayContainersOnPopUp = false; containersPopUpDisplay = null\">\n      <template #titel >\n        Containers\n      </template>\n      <template #content >\n        <div v-if=\"containersPopUpDisplay != null\" class=\"popup-holder\">\n          <tableExtension v-if=\"containersPopUpDisplay.length != 0\">\n            <template #tableHeaders>\n              <td>Name</td>\n              <td>ID</td>\n              <td>PORTS</td>\n              <td>STATUS</td>\n            </template>\n            <template #tableRows>\n              <tr v-for=\"container in containersPopUpDisplay\" :key=\"container.id\">\n                <td class=\"server-name\">{{ container[\"NAMES\"] }}</td>\n                <td>\n                  <p>{{ container[\"CONTAINER ID\"] }}</p>\n                </td>\n                <td>\n                  <p>{{ container[\"PORTS\"] }}</p>\n                </td>\n                <td>\n                  <p>{{ container[\"STATUS\"] }}</p>\n                </td>\n              </tr>\n            </template>\n          </tableExtension>\n          <p v-else >This server has no runing container...</p>\n        </div>\n        <loadingBar v-if=\"containersPopUpDisplay == null\" ></loadingBar>\n      </template>\n    </popupDisplay>\n  </div>\n</template>\n<script>\nimport { UseAuthStore } from \"@/store/store.js\"\nimport apiFetch from \"@/common/api.service.js\"\n\nimport popupDisplay from \"@/components/interraction/popups/popup-display.vue\"\nimport queryNavbar from \"@/components/interraction/query/query-navbar.vue\"\nimport tableExtension from \"@/components/interraction/tables/table-withextension.vue\"\nimport loadingBar from \"@/components/loadingAnimations/bar-loading.vue\"\nexport default{\n    name : 'supervision-view',\n    data(){\n        return{\n          AuthStore : UseAuthStore(),\n          servers : [],\n          fetchingForServers : true,\n          displayContainersOnPopUp : false,\n          containersPopUpDisplay : null\n        } \n    },\n    components : {\n      queryNavbar,\n      tableExtension,\n      popupDisplay,\n      loadingBar,\n    },\n    methods : {\n      getServers(query_name){\n        this.fetchingForServers= true;\n        let type = this.$route.query.UAT ? 'UAT' : 'Prod' ;\n        let endpoint = \"/\" + type +'/servers';\n        if(query_name != null){\n          endpoint = endpoint + \"?name=\" + query_name\n        }\n        apiFetch.get(endpoint,false)\n        .then( (servers)=>{\n          this.servers = servers;\n          this.fetchingForServers=false;\n          this.emitter.emit(\"sidebar-errors\",{error : true , description : \"No server matching \"+query_name+\" was found.\"})\n        })\n      },\n      onInputChanged(inputValue){\n        this.getServersWithNameLike(inputValue)\n      },\n      getServersWithNameLike(NameLike){\n        console.log(NameLike)\n        this.getServers(NameLike)\n      },\n      displayContainersOf(server){\n        //api/server/<int:server>/containers\n        let endpoint = \"/server/\" + server.id +'/containers/status';\n        apiFetch.get(endpoint,false,true)\n        .then( (containers)=>{\n          this.containersPopUpDisplay = containers;\n        })\n        .catch((error)=>{\n          this.displayContainersOnPopUp = false;\n          this.containersPopUpDisplay = null;\n          this.emitter.emit(\"sidebar-error\",{error : true , description : error.error})\n        })\n\n        this.displayContainersOnPopUp = true;\n      },\n      addHashToLocation(params) {\n        history.pushState(\n          {},\n          null,\n          this.$route.path + '#' + encodeURIComponent(params)\n        )\n      }\n    },\n    beforeMount(){\n        this.getServers(null);\n    },\n    watch : {\n      async'$route.query'(){\n        this.servers = []\n        await this.getServers(null)\n      }\n    }\n}\n</script>\n<style scoped>\n.popup-holder{\n  width: 100%;\n  height: 100%;\n}\n.hoder-supervision{\n  height: 100%;\n  max-height: 100vh;\n  width: 100%;\n\n  display: grid;\n  grid-template-rows: 120px  50px  1fr;\n}\n.Welcomeback{\n  height: auto;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: start;\n\n  gap : 5px;\n  padding : var(--medieum-padding);\n  box-sizing: border-box;\n  border-radius: var(--medieum-border-radius);\n\n\n\n  color:white;\n}\n\n\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}