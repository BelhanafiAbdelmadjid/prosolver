{"ast":null,"code":"import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_largeNavBar = _resolveComponent(\"largeNavBar\");\n  const _component_thinNavBar = _resolveComponent(\"thinNavBar\");\n  return $data.widthLarge ? (_openBlock(), _createBlock(_component_largeNavBar, {\n    key: 0,\n    connexionType: $data.connexionType,\n    onLogout: _ctx.disconnect\n  }, null, 8 /* PROPS */, [\"connexionType\", \"onLogout\"])) : (_openBlock(), _createBlock(_component_thinNavBar, {\n    key: 1,\n    connexionType: $data.connexionType,\n    onLogout: _ctx.disconnect\n  }, null, 8 /* PROPS */, [\"connexionType\", \"onLogout\"]));\n}","map":{"version":3,"names":["$data","widthLarge","_createBlock","_component_largeNavBar","key","connexionType","onLogout","_ctx","disconnect","_component_thinNavBar"],"sources":["/Users/abdelmadjidbelhanafi/Documents/vsc project/Natixis/new-banxy-rest-api/frontend/src/components/navbars/nav-bar.vue"],"sourcesContent":["<template>\n    <largeNavBar v-if=\"widthLarge\" :connexionType=\"connexionType\" @logout=\"disconnect\" ></largeNavBar>\n    <thinNavBar v-else  :connexionType=\"connexionType\" @logout=\"disconnect\"></thinNavBar>\n</template>\n<script>\nimport thinNavBar from './thin-nav-bar.vue';\nimport largeNavBar from './large-nav-bar.vue';\n\nimport { UseAuthStore } from '@/store/store';\nimport apiFetch from '@/common/api.service';\nexport default{\n    data(){\n        return {\n            AuthStore : UseAuthStore(),\n            widthLarge : window.innerWidth >= 1000 ? true : false,\n            connexionType : null\n        }\n    },\n    mounted(){\n        window.addEventListener('resize', ()=>{\n            this.widthLarge = window.innerWidth >= 1000 ? true : false;\n        });\n    },\n    components : {\n        thinNavBar,\n        largeNavBar\n    },\n    created(){\n        let endpoint = \"/login/informations\"\n        apiFetch.get(endpoint,false)\n        .then((response)=>{\n            this.AuthStore.username = response.username;\n            this.AuthStore.connexionType = response.connexionType;\n\n            this.connexionType = response.connexionType.UAT == true ? 'UAT' : 'Prod'\n        })\n    },\n    methods : {\n        logout(){\n            let endpoint = \"/logout\"\n            apiFetch.post()\n        }\n    }\n}\n</script>\n"],"mappings":";;;;SACuBA,KAAA,CAAAC,UAAU,I,cAA7BC,YAAA,CAAkGC,sBAAA;IADtGC,GAAA;IACoCC,aAAa,EAAEL,KAAA,CAAAK,aAAa;IAAGC,QAAM,EAAEC,IAAA,CAAAC;2EACvEN,YAAA,CAAqFO,qBAAA;IAFzFL,GAAA;IAEyBC,aAAa,EAAEL,KAAA,CAAAK,aAAa;IAAGC,QAAM,EAAEC,IAAA,CAAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}