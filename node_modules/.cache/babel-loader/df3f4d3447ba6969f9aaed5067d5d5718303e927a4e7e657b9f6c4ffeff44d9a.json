{"ast":null,"code":"export default {\n  name: \"lineShell-vue\",\n  components: {},\n  data() {\n    return {\n      cursor: true,\n      filled: \"\",\n      ok: false\n    };\n  },\n  methods: {\n    async copyURL(mytext) {\n      await navigator.clipboard.writeText(mytext);\n      this.emitter.emit(\"sidebar-error\", {\n        error: false,\n        description: \"Copied successfully.\"\n      });\n    },\n    removeCursor() {\n      this.cursor = false;\n    },\n    addCursor() {\n      this.cursor = true;\n    },\n    checkColor() {\n      for (let lineOk in this.validCommands) {\n        if (this.validCommands[lineOk] == this.filled.trim()) {\n          return this.ok = true;\n        }\n      }\n      return this.ok = false;\n    },\n    Sending() {\n      this.$emit(\"fill-shell\", this.filled.trim());\n      this.filled = \"\";\n    }\n  },\n  props: [\"last\", \"result\", \"username\", \"command\", \"validCommands\", \"server\", \"notWaitingForOutPut\"],\n  mounted() {}\n};","map":{"version":3,"names":["name","components","data","cursor","filled","ok","methods","copyURL","mytext","navigator","clipboard","writeText","emitter","emit","error","description","removeCursor","addCursor","checkColor","lineOk","validCommands","trim","Sending","$emit","props","mounted"],"sources":["/Users/abdelmadjidbelhanafi/Documents/vsc project/Natixis/new-banxy-rest-api/frontend/src/components/incident-execute/shellline.vue"],"sourcesContent":["<template>\n    <div class=\"lineShell\">\n        <p>\n            <span class=\"user\" >{{ username }}</span>\n            <span>@</span>\n            <span class=\"server\">{{ server }}</span>\n            <span v-if=\"cursor && filled == '' && last && notWaitingForOutPut\"  :class=\"{'typing-cursor' : last}\">:$ ~</span>\n            <span v-else >:$ ~</span>\n            <span  class=\"command\" >{{ command }}</span>\n            \n            <input v-focus style=\"width: fit-content;\"  v-if=\"last && notWaitingForOutPut\"  @focusin=\"removeCursor\"  @input=\"checkColor\" @keydown.enter=\"Sending\" class=\"typeInput \" :class=\"{'yellow' : ok,'red' : !ok}\"  v-model=\"filled\">\n        </p>\n        <div class=\"result\">\n            <p @click=\"copyURL(res.value)\" class=\"result-line\" :class=\"{'result-error' : (res.type == 'error'),'result-correct' : (res.type == 'correct'),'result-warning' : (res.type == 'warning')}\"  v-for=\"res,index in result\" :key=\"index\" >\n                {{ res.value }}\n            </p>\n        </div>\n\n    </div>\n</template>\n<script>\n export default {\n     name : \"lineShell-vue\",\n     components : {\n      \n     },\n   \n     data(){\n        return {\n            cursor : true,\n            filled : \"\",\n            ok : false,\n            \n            }\n     },methods:{\n        async copyURL(mytext) {\n          await navigator.clipboard.writeText(mytext);\n          this.emitter.emit(\"sidebar-error\",{\n            error : false,\n            description : \"Copied successfully.\"\n          })\n     \n        },\n        removeCursor(){\n        this.cursor = false;\n        },\n        addCursor(){\n        this.cursor = true;\n        },\n        checkColor(){\n        for(let lineOk in this.validCommands ){\n            if(this.validCommands[lineOk] == this.filled.trim()){\n            return this.ok = true;\n            }\n        }\n        return this.ok = false;\n\n        },\n        Sending(){\n            this.$emit(\"fill-shell\",(this.filled.trim()));\n            this.filled = \"\";\n        },\n      \n     },\n     props : [\"last\",\"result\",\"username\",\"command\",\"validCommands\",\"server\",\"notWaitingForOutPut\"],\n     mounted(){\n     }\n }\n</script>\n<style scoped>\n.result-line{\n    cursor: pointer;\n    transition: all 0.15s;\n    \n    width: 100%;\n\n\n}\n.result-line:hover{\n    opacity: 0.6;\n    background-color: white;\n    color: black;\n\n    padding: 3px;\n    box-sizing: border-box;\n}\n\n\n.result-error{\n  color: red;\n}\n\n.result-correct{\n  color: green;\n}\n.result-warning{\n    color : #EBFF04;\n}\n.result{\n  width: 100%;\n\n  box-sizing: border-box;\n  padding-top : 5px;\n\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: flex-start;\n  \n}\n.yellow{\n  color : yellow;\n}\n.red{\n  color : red;\n}\n.typeInput{\n    border: none;\n    outline: none;\n    padding: 0;\n    margin: 0;\n    background-color: transparent;\n\n    /* pointer-events: all; */\n    \n}\n.typing-cursor {\n    position : relative;\n}\n\n/* Define the CSS animation keyframes */\n@keyframes blinkCursor {\n  0% ,100% {\n    background-color: white;\n  }\n  50% {\n    background-color: transparent;\n  }\n\n}\n\n/* Apply the animation to the cursor bar when waiting for typing */\n.typing-cursor::after {\n    animation: blinkCursor 0.75s infinite;\n    position : absolute;\n    content: \"\";\n    display: inline-block;\n    width: 1px;\n    height: 14px;\n    right : -4px ;\n    \n}\n\n.input-container input {\n  border: 2px solid #333;\n  padding: 5px 10px;\n  font-size: 16px;\n  width: 300px;\n  outline: none; /* Remove default focus outline */\n}\n\n@keyframes blink {\n  0% {\n    border-color: #333;\n  }\n  50% {\n    border-color: transparent;\n  }\n  100% {\n    border-color: #333;\n  }\n}\n\n.input-container input:last-child::after {\n  content: \"\";\n  display: inline-block;\n  width: 2px;\n  height: 18px;\n  background-color: #333;\n  animation: blink 1s infinite;\n}\n.command{\n    margin-left : 5px;\n}\n.lineShell{\n    width: 100%;\n    color : white;\n    height: auto;\n}\n.user{\n    color : #CA3EFB;\n}\n.server{\n    color : #EBFF04;\n}\n.lineShell p{\n    font-size : 13px;\n    display: flex;\n    flex-direction: row;\n    flex-flow: wrap;\n}\n</style>  "],"mappings":"AAqBC,eAAe;EACXA,IAAG,EAAI,eAAe;EACtBC,UAAS,EAAI,CAEb,CAAC;EAEDC,IAAIA,CAAA,EAAE;IACH,OAAO;MACHC,MAAK,EAAI,IAAI;MACbC,MAAK,EAAI,EAAE;MACXC,EAAC,EAAI;IAEL;EACP,CAAC;EAACC,OAAO,EAAC;IACP,MAAMC,OAAOA,CAACC,MAAM,EAAE;MACpB,MAAMC,SAAS,CAACC,SAAS,CAACC,SAAS,CAACH,MAAM,CAAC;MAC3C,IAAI,CAACI,OAAO,CAACC,IAAI,CAAC,eAAe,EAAC;QAChCC,KAAI,EAAI,KAAK;QACbC,WAAU,EAAI;MAChB,CAAC;IAEH,CAAC;IACDC,YAAYA,CAAA,EAAE;MACd,IAAI,CAACb,MAAK,GAAI,KAAK;IACnB,CAAC;IACDc,SAASA,CAAA,EAAE;MACX,IAAI,CAACd,MAAK,GAAI,IAAI;IAClB,CAAC;IACDe,UAAUA,CAAA,EAAE;MACZ,KAAI,IAAIC,MAAK,IAAK,IAAI,CAACC,aAAY,EAAG;QAClC,IAAG,IAAI,CAACA,aAAa,CAACD,MAAM,KAAK,IAAI,CAACf,MAAM,CAACiB,IAAI,CAAC,CAAC,EAAC;UACpD,OAAO,IAAI,CAAChB,EAAC,GAAI,IAAI;QACrB;MACJ;MACA,OAAO,IAAI,CAACA,EAAC,GAAI,KAAK;IAEtB,CAAC;IACDiB,OAAOA,CAAA,EAAE;MACL,IAAI,CAACC,KAAK,CAAC,YAAY,EAAE,IAAI,CAACnB,MAAM,CAACiB,IAAI,CAAC,CAAE,CAAC;MAC7C,IAAI,CAACjB,MAAK,GAAI,EAAE;IACpB;EAEH,CAAC;EACDoB,KAAI,EAAI,CAAC,MAAM,EAAC,QAAQ,EAAC,UAAU,EAAC,SAAS,EAAC,eAAe,EAAC,QAAQ,EAAC,qBAAqB,CAAC;EAC7FC,OAAOA,CAAA,EAAE,CACT;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}