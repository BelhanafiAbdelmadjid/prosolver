{"ast":null,"code":"import apiFetch from \"@/common/api.service\";\nimport interraction from \"./interraction-script.vue\";\nimport buttonValidation from \"@/components/interraction/buttons/validation-button.vue\";\nexport default {\n  name: 'script-create',\n  components: {\n    interraction,\n    buttonValidation\n  },\n  data() {\n    return {\n      step: {\n        name: '',\n        server: null,\n        container: null,\n        script: null,\n        inputs: null\n      },\n      req: {\n        scripts: [],\n        servers: []\n      },\n      selectContainer: false,\n      containersSelect: []\n    };\n  },\n  watch: {\n    'step.server': () => {\n      this.containersSelect = this.step.servers.filter(server => server.id == this.step.server).containers;\n    }\n  },\n  beforeMount() {\n    // incident/3/step/create\n    let endpoint = '/incident/' + this.$route.params.id + '/step/create';\n    apiFetch.get(endpoint, false).then(req => {\n      this.req = req;\n    });\n  }\n};","map":{"version":3,"names":["apiFetch","interraction","buttonValidation","name","components","data","step","server","container","script","inputs","req","scripts","servers","selectContainer","containersSelect","watch","step.server","filter","id","containers","beforeMount","endpoint","$route","params","get","then"],"sources":["/Users/abdelmadjidbelhanafi/Documents/vsc project/Natixis/new-banxy-rest-api/frontend/src/views/steps/create.vue"],"sourcesContent":["<template>\n    <interraction>\n        <template #ScriptHeader >Creating new step</template>\n\n\n        <template #InputName >\n            <input v-model=\"step.name\"  type=\"text\">\n        </template>\n        <template #InputScript >\n            <select v-model=\"step.script\" >\n                <option v-for=\"script in req.scripts\" :key=\"script.id\" :value=\"script.id\">{{ script.name+'.'+script.language }}</option>\n            </select>\n        </template>\n        <template #InputServer >\n            <select v-model=\"step.server\"  >\n                <option v-for=\"server in req.servers\" :key=\"server.id\" :value=\"server.id\">{{ server.name}}</option>\n            </select>\n        </template>\n        <template #InputContainerChekbox >\n            <input type=\"checkbox\" v-model=\"selectContainer\" name=\"\" id=\"\">\n        </template>\n        <template v-if=\"selectContainer\" #InputContainer >\n            <select v-model=\"step.container\"  >\n                <option v-for=\"container in containersSelect\" :key=\"container.id\" :value=\"container.id\">{{ container.name}}</option>\n            </select>\n        </template>\n\n\n        <template #InputAddButton >\n            <label @click=\"addInput()\" style=\"cursor: pointer;\">Add+</label>\n        </template>\n        <template #GlobalInputListing >\n            <div style=\"height: 100%;width: 100%;\" >\n\n            </div>\n        </template>\n        <template #Footer >\n            <buttonValidation style=\"width: 100%;\"  @click=\"createServer()\" :ok=\"true\" :type=\"'submit'\">\n                <template #textButton>\n                    Create\n                </template>\n            </buttonValidation>\n        </template> \n\n        <template #popUps >\n            \n        </template>\n\n    </interraction>\n</template>\n<script>\nimport apiFetch from \"@/common/api.service\"\nimport interraction from \"./interraction-script.vue\"\nimport buttonValidation from \"@/components/interraction/buttons/validation-button.vue\"\nexport default{\n    name : 'script-create',\n    components : {\n        interraction,\n        buttonValidation\n    },\n    data(){\n        return{\n            step : {\n                name : '',\n                server : null ,\n                container : null,\n                script : null,\n                inputs : null\n            },\n            req : {\n                scripts : [],\n                servers : [],\n            },\n            selectContainer : false,\n            containersSelect : []\n        }\n    },\n    watch : {\n        'step.server' : ()=>{\n            this.containersSelect = this.step.servers.filter( server => server.id == this.step.server ).containers\n        }\n    },\n    beforeMount(){\n        // incident/3/step/create\n        let endpoint = '/incident/'+ this.$route.params.id+'/step/create'\n        apiFetch.get(endpoint,false)\n        .then((req)=>{\n            this.req =req;\n        })\n    }\n}\n</script>\n<style scoped>\n\n\n\n</style>"],"mappings":"AAmDA,OAAOA,QAAO,MAAO,sBAAqB;AAC1C,OAAOC,YAAW,MAAO,2BAA0B;AACnD,OAAOC,gBAAe,MAAO,yDAAwD;AACrF,eAAc;EACVC,IAAG,EAAI,eAAe;EACtBC,UAAS,EAAI;IACTH,YAAY;IACZC;EACJ,CAAC;EACDG,IAAIA,CAAA,EAAE;IACF,OAAM;MACFC,IAAG,EAAI;QACHH,IAAG,EAAI,EAAE;QACTI,MAAK,EAAI,IAAG;QACZC,SAAQ,EAAI,IAAI;QAChBC,MAAK,EAAI,IAAI;QACbC,MAAK,EAAI;MACb,CAAC;MACDC,GAAE,EAAI;QACFC,OAAM,EAAI,EAAE;QACZC,OAAM,EAAI;MACd,CAAC;MACDC,eAAc,EAAI,KAAK;MACvBC,gBAAe,EAAI;IACvB;EACJ,CAAC;EACDC,KAAI,EAAI;IACJ,aAAY,EAAIC,CAAA,KAAI;MAChB,IAAI,CAACF,gBAAe,GAAI,IAAI,CAACT,IAAI,CAACO,OAAO,CAACK,MAAM,CAAEX,MAAK,IAAKA,MAAM,CAACY,EAAC,IAAK,IAAI,CAACb,IAAI,CAACC,MAAO,CAAC,CAACa,UAAS;IACzG;EACJ,CAAC;EACDC,WAAWA,CAAA,EAAE;IACT;IACA,IAAIC,QAAO,GAAI,YAAY,GAAE,IAAI,CAACC,MAAM,CAACC,MAAM,CAACL,EAAE,GAAC,cAAa;IAChEnB,QAAQ,CAACyB,GAAG,CAACH,QAAQ,EAAC,KAAK,EAC1BI,IAAI,CAAEf,GAAG,IAAG;MACT,IAAI,CAACA,GAAE,GAAGA,GAAG;IACjB,CAAC;EACL;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}